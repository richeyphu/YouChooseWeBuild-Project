# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/admin_main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
from datetime import datetime

from functools import partial

import gridfs
import pymongo
import pyperclip
from PIL import Image

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QDateTime, QLocale
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QTableWidgetItem

from ucwblib import GetDatabase, ICON_PATH_ADMIN, AdminQMessageBox as QMessageBox, getOrderStatus, getSettings


class Ui_frm_admin_main(object):
    def __init__(self):
        self.btn_cus_select = list()
        self.customers_count = 0
        self.customers = list()
        self.users_count = 0
        self.users = list()
        self.current_pid = None
        self.btn_pro_view = list()
        self.products_count = 0
        self.products = list()
        self.tax_rate = 0
        self.shipping_fee = 0
        self.current_oid = None
        self.orders = list()
        self.orders_count = 0

    def setupUi(self, frm_admin_main):
        frm_admin_main.setObjectName("frm_admin_main")
        frm_admin_main.setWindowModality(QtCore.Qt.ApplicationModal)
        # frm_admin_main.resize(1080, 720)
        frm_admin_main.setFixedSize(QtCore.QSize(1080, 720))
        frm_admin_main.setStyleSheet("")

        # Set window icon
        frm_admin_main.setWindowIcon(QtGui.QIcon(ICON_PATH_ADMIN))
        # Set locale
        frm_admin_main.setLocale(QLocale("en-us"))

        self.centralwidget = QtWidgets.QWidget(frm_admin_main)
        self.centralwidget.setObjectName("centralwidget")
        self.frame_header = QtWidgets.QFrame(self.centralwidget)
        self.frame_header.setGeometry(QtCore.QRect(0, 0, 1081, 61))
        self.frame_header.setStyleSheet("background-color: rgb(151, 77, 236);")
        self.frame_header.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_header.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_header.setObjectName("frame_header")
        self.lbl_title = QtWidgets.QLabel(self.frame_header)
        self.lbl_title.setGeometry(QtCore.QRect(20, 10, 291, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(20)
        self.lbl_title.setFont(font)
        self.lbl_title.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_title.setObjectName("lbl_title")
        self.lbl_hi = QtWidgets.QLabel(self.frame_header)
        self.lbl_hi.setGeometry(QtCore.QRect(760, 10, 301, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(18)
        self.lbl_hi.setFont(font)
        self.lbl_hi.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.lbl_hi.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_hi.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lbl_hi.setObjectName("lbl_hi")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(20, 80, 1041, 611))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(14)
        self.tabWidget.setFont(font)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setTabBarAutoHide(True)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_orders = QtWidgets.QWidget()
        self.tab_orders.setObjectName("tab_orders")
        self.tbl_ord_orders = QtWidgets.QTableWidget(self.tab_orders)
        self.tbl_ord_orders.setGeometry(QtCore.QRect(10, 60, 561, 501))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(11)
        self.tbl_ord_orders.setFont(font)
        self.tbl_ord_orders.setObjectName("tbl_ord_orders")
        self.tbl_ord_orders.setColumnCount(5)
        self.tbl_ord_orders.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_ord_orders.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_ord_orders.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_ord_orders.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_ord_orders.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_ord_orders.setHorizontalHeaderItem(4, item)
        self.btn_ord_search = QtWidgets.QPushButton(self.tab_orders)
        self.btn_ord_search.setGeometry(QtCore.QRect(510, 20, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_ord_search.setFont(font)
        self.btn_ord_search.setObjectName("btn_ord_search")
        self.txt_ord_search = QtWidgets.QLineEdit(self.tab_orders)
        self.txt_ord_search.setGeometry(QtCore.QRect(350, 20, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_ord_search.setFont(font)
        self.txt_ord_search.setObjectName("txt_ord_search")
        self.lbl_ord_found = QtWidgets.QLabel(self.tab_orders)
        self.lbl_ord_found.setGeometry(QtCore.QRect(10, 20, 191, 31))
        self.lbl_ord_found.setObjectName("lbl_ord_found")
        self.lbl_ord_statusDetail = QtWidgets.QLabel(self.tab_orders)
        self.lbl_ord_statusDetail.setGeometry(QtCore.QRect(610, 450, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_ord_statusDetail.setFont(font)
        self.lbl_ord_statusDetail.setObjectName("lbl_ord_statusDetail")
        self.cmb_ord_statusDetail = QtWidgets.QComboBox(self.tab_orders)
        self.cmb_ord_statusDetail.setGeometry(QtCore.QRect(610, 474, 150, 22))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.cmb_ord_statusDetail.setFont(font)
        self.cmb_ord_statusDetail.setObjectName("cmb_ord_statusDetail")
        self.cmb_ord_statusDetail.addItem("")
        self.cmb_ord_statusDetail.addItem("")
        self.cmb_ord_statusDetail.addItem("")
        self.cmb_ord_statusDetail.addItem("")
        self.cmb_ord_statusDetail.addItem("")
        self.cmb_ord_statusDetail.addItem("")
        self.cmb_ord_statusDetail.addItem("")
        self.cmb_ord_statusDetail.addItem("")
        self.btn_ord_cancel = QtWidgets.QPushButton(self.tab_orders)
        self.btn_ord_cancel.setGeometry(QtCore.QRect(790, 520, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_ord_cancel.setFont(font)
        self.btn_ord_cancel.setObjectName("btn_ord_cancel")
        self.lbl_ord_detail = QtWidgets.QLabel(self.tab_orders)
        self.lbl_ord_detail.setGeometry(QtCore.QRect(610, 10, 411, 31))
        self.lbl_ord_detail.setObjectName("lbl_ord_detail")
        self.tbl_ord_cart = QtWidgets.QTableWidget(self.tab_orders)
        self.tbl_ord_cart.setGeometry(QtCore.QRect(610, 50, 411, 391))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(11)
        self.tbl_ord_cart.setFont(font)
        self.tbl_ord_cart.setObjectName("tbl_ord_cart")
        self.tbl_ord_cart.setColumnCount(4)
        self.tbl_ord_cart.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_ord_cart.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_ord_cart.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_ord_cart.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_ord_cart.setHorizontalHeaderItem(3, item)
        self.line_ord = QtWidgets.QFrame(self.tab_orders)
        self.line_ord.setGeometry(QtCore.QRect(580, 10, 20, 551))
        self.line_ord.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_ord.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_ord.setObjectName("line_ord")
        self.btn_ord_update = QtWidgets.QPushButton(self.tab_orders)
        self.btn_ord_update.setGeometry(QtCore.QRect(910, 520, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_ord_update.setFont(font)
        self.btn_ord_update.setObjectName("btn_ord_update")
        self.lbl_ord_statusSearch = QtWidgets.QLabel(self.tab_orders)
        self.lbl_ord_statusSearch.setGeometry(QtCore.QRect(210, 0, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_ord_statusSearch.setFont(font)
        self.lbl_ord_statusSearch.setObjectName("lbl_ord_statusSearch")
        self.cmb_ord_statusSearch = QtWidgets.QComboBox(self.tab_orders)
        self.cmb_ord_statusSearch.setGeometry(QtCore.QRect(210, 30, 131, 22))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.cmb_ord_statusSearch.setFont(font)
        self.cmb_ord_statusSearch.setObjectName("cmb_ord_statusSearch")
        self.cmb_ord_statusSearch.addItem("")
        self.cmb_ord_statusSearch.addItem("")
        self.cmb_ord_statusSearch.addItem("")
        self.cmb_ord_statusSearch.addItem("")
        self.cmb_ord_statusSearch.addItem("")
        self.cmb_ord_statusSearch.addItem("")
        self.cmb_ord_statusSearch.addItem("")
        self.cmb_ord_statusSearch.addItem("")
        self.txt_ord_trackingNo = QtWidgets.QLineEdit(self.tab_orders)
        self.txt_ord_trackingNo.setGeometry(QtCore.QRect(610, 530, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.txt_ord_trackingNo.setFont(font)
        self.txt_ord_trackingNo.setText("")
        self.txt_ord_trackingNo.setObjectName("txt_ord_trackingNo")
        self.lbl_ord_trackingNo = QtWidgets.QLabel(self.tab_orders)
        self.lbl_ord_trackingNo.setGeometry(QtCore.QRect(610, 506, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_ord_trackingNo.setFont(font)
        self.lbl_ord_trackingNo.setObjectName("lbl_ord_trackingNo")
        self.btn_ord_viewSlip = QtWidgets.QPushButton(self.tab_orders)
        self.btn_ord_viewSlip.setGeometry(QtCore.QRect(910, 470, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_ord_viewSlip.setFont(font)
        self.btn_ord_viewSlip.setObjectName("btn_ord_viewSlip")
        self.btn_ord_viewAddress = QtWidgets.QPushButton(self.tab_orders)
        self.btn_ord_viewAddress.setGeometry(QtCore.QRect(790, 470, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_ord_viewAddress.setFont(font)
        self.btn_ord_viewAddress.setObjectName("btn_ord_viewAddress")
        self.tabWidget.addTab(self.tab_orders, "")
        self.tab_products = QtWidgets.QWidget()
        self.tab_products.setObjectName("tab_products")
        self.tbl_pro_products = QtWidgets.QTableWidget(self.tab_products)
        self.tbl_pro_products.setGeometry(QtCore.QRect(10, 60, 711, 501))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(11)
        self.tbl_pro_products.setFont(font)
        self.tbl_pro_products.setObjectName("tbl_pro_products")
        self.tbl_pro_products.setColumnCount(7)
        self.tbl_pro_products.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_pro_products.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_pro_products.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_pro_products.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_pro_products.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_pro_products.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_pro_products.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_pro_products.setHorizontalHeaderItem(6, item)
        self.btn_pro_search = QtWidgets.QPushButton(self.tab_products)
        self.btn_pro_search.setGeometry(QtCore.QRect(660, 20, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_pro_search.setFont(font)
        self.btn_pro_search.setObjectName("btn_pro_search")
        self.txt_pro_search = QtWidgets.QLineEdit(self.tab_products)
        self.txt_pro_search.setGeometry(QtCore.QRect(480, 20, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_pro_search.setFont(font)
        self.txt_pro_search.setObjectName("txt_pro_search")
        self.lbl_pro_found = QtWidgets.QLabel(self.tab_products)
        self.lbl_pro_found.setGeometry(QtCore.QRect(10, 20, 281, 31))
        self.lbl_pro_found.setObjectName("lbl_pro_found")
        self.cmb_pro_sortby = QtWidgets.QComboBox(self.tab_products)
        self.cmb_pro_sortby.setGeometry(QtCore.QRect(340, 30, 121, 22))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.cmb_pro_sortby.setFont(font)
        self.cmb_pro_sortby.setObjectName("cmb_pro_sortby")
        self.cmb_pro_sortby.addItem("")
        self.cmb_pro_sortby.addItem("")
        self.cmb_pro_sortby.addItem("")
        self.cmb_pro_sortby.addItem("")
        self.cmb_pro_sortby.addItem("")
        self.cmb_pro_sortby.addItem("")
        self.lbl_pro_sortby = QtWidgets.QLabel(self.tab_products)
        self.lbl_pro_sortby.setGeometry(QtCore.QRect(340, 0, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_pro_sortby.setFont(font)
        self.lbl_pro_sortby.setObjectName("lbl_pro_sortby")
        self.line_pro = QtWidgets.QFrame(self.tab_products)
        self.line_pro.setGeometry(QtCore.QRect(730, 20, 20, 541))
        self.line_pro.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_pro.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_pro.setObjectName("line_pro")
        self.lbl_pro_detail = QtWidgets.QLabel(self.tab_products)
        self.lbl_pro_detail.setGeometry(QtCore.QRect(760, 20, 261, 31))
        self.lbl_pro_detail.setObjectName("lbl_pro_detail")
        self.btn_pro_cancel = QtWidgets.QPushButton(self.tab_products)
        self.btn_pro_cancel.setGeometry(QtCore.QRect(760, 520, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_pro_cancel.setFont(font)
        self.btn_pro_cancel.setObjectName("btn_pro_cancel")
        self.btn_pro_add = QtWidgets.QPushButton(self.tab_products)
        self.btn_pro_add.setGeometry(QtCore.QRect(900, 520, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_pro_add.setFont(font)
        self.btn_pro_add.setObjectName("btn_pro_add")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tab_products)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(760, 60, 261, 433))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_pro = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_pro.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_pro.setObjectName("verticalLayout_pro")
        self.lbl_pro_name = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_pro_name.setFont(font)
        self.lbl_pro_name.setObjectName("lbl_pro_name")
        self.verticalLayout_pro.addWidget(self.lbl_pro_name)
        self.txt_pro_name = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_pro_name.setFont(font)
        self.txt_pro_name.setObjectName("txt_pro_name")
        self.verticalLayout_pro.addWidget(self.txt_pro_name)
        self.lbl_pro_desc = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_pro_desc.setFont(font)
        self.lbl_pro_desc.setObjectName("lbl_pro_desc")
        self.verticalLayout_pro.addWidget(self.lbl_pro_desc)
        self.txt_pro_desc = QtWidgets.QTextEdit(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_pro_desc.setFont(font)
        self.txt_pro_desc.setObjectName("txt_pro_desc")
        self.verticalLayout_pro.addWidget(self.txt_pro_desc)
        self.lbl_pro_brand = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_pro_brand.setFont(font)
        self.lbl_pro_brand.setObjectName("lbl_pro_brand")
        self.verticalLayout_pro.addWidget(self.lbl_pro_brand)
        self.txt_pro_brand = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_pro_brand.setFont(font)
        self.txt_pro_brand.setObjectName("txt_pro_brand")
        self.verticalLayout_pro.addWidget(self.txt_pro_brand)
        self.lbl_pro_price = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_pro_price.setFont(font)
        self.lbl_pro_price.setObjectName("lbl_pro_price")
        self.verticalLayout_pro.addWidget(self.lbl_pro_price)
        self.txt_pro_price = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_pro_price.setFont(font)
        self.txt_pro_price.setObjectName("txt_pro_price")
        self.verticalLayout_pro.addWidget(self.txt_pro_price)
        self.lbl_pro_spec = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_pro_spec.setFont(font)
        self.lbl_pro_spec.setObjectName("lbl_pro_spec")
        self.verticalLayout_pro.addWidget(self.lbl_pro_spec)
        self.txt_pro_spec = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_pro_spec.setFont(font)
        self.txt_pro_spec.setObjectName("txt_pro_spec")
        self.verticalLayout_pro.addWidget(self.txt_pro_spec)
        self.lbl_pro_cat = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_pro_cat.setFont(font)
        self.lbl_pro_cat.setObjectName("lbl_pro_cat")
        self.verticalLayout_pro.addWidget(self.lbl_pro_cat)
        self.cmb_pro_cat = QtWidgets.QComboBox(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.cmb_pro_cat.setFont(font)
        self.cmb_pro_cat.setObjectName("cmb_pro_cat")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.cmb_pro_cat.addItem("")
        self.verticalLayout_pro.addWidget(self.cmb_pro_cat)
        self.tabWidget.addTab(self.tab_products, "")
        self.tab_customers = QtWidgets.QWidget()
        self.tab_customers.setObjectName("tab_customers")
        self.tbl_cus_customers = QtWidgets.QTableWidget(self.tab_customers)
        self.tbl_cus_customers.setGeometry(QtCore.QRect(10, 60, 861, 501))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(11)
        self.tbl_cus_customers.setFont(font)
        self.tbl_cus_customers.setObjectName("tbl_cus_customers")
        self.tbl_cus_customers.setColumnCount(7)
        self.tbl_cus_customers.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cus_customers.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cus_customers.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cus_customers.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cus_customers.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cus_customers.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cus_customers.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cus_customers.setHorizontalHeaderItem(6, item)
        self.btn_cus_search = QtWidgets.QPushButton(self.tab_customers)
        self.btn_cus_search.setGeometry(QtCore.QRect(810, 20, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_cus_search.setFont(font)
        self.btn_cus_search.setObjectName("btn_cus_search")
        self.txt_cus_search = QtWidgets.QLineEdit(self.tab_customers)
        self.txt_cus_search.setGeometry(QtCore.QRect(610, 20, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_cus_search.setFont(font)
        self.txt_cus_search.setObjectName("txt_cus_search")
        self.lbl_cus_found = QtWidgets.QLabel(self.tab_customers)
        self.lbl_cus_found.setGeometry(QtCore.QRect(10, 20, 281, 31))
        self.lbl_cus_found.setObjectName("lbl_cus_found")
        self.cmb_cus_sortby = QtWidgets.QComboBox(self.tab_customers)
        self.cmb_cus_sortby.setGeometry(QtCore.QRect(470, 30, 121, 22))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.cmb_cus_sortby.setFont(font)
        self.cmb_cus_sortby.setObjectName("cmb_cus_sortby")
        self.cmb_cus_sortby.addItem("")
        self.cmb_cus_sortby.addItem("")
        self.cmb_cus_sortby.addItem("")
        self.cmb_cus_sortby.addItem("")
        self.cmb_cus_sortby.addItem("")
        self.cmb_cus_sortby.addItem("")
        self.lbl_cus_sortby = QtWidgets.QLabel(self.tab_customers)
        self.lbl_cus_sortby.setGeometry(QtCore.QRect(470, 0, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_cus_sortby.setFont(font)
        self.lbl_cus_sortby.setObjectName("lbl_cus_sortby")
        self.btn_cus_view = QtWidgets.QPushButton(self.tab_customers)
        self.btn_cus_view.setGeometry(QtCore.QRect(900, 470, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_cus_view.setFont(font)
        self.btn_cus_view.setObjectName("btn_cus_view")
        self.btn_cus_edit = QtWidgets.QPushButton(self.tab_customers)
        self.btn_cus_edit.setGeometry(QtCore.QRect(900, 520, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_cus_edit.setFont(font)
        self.btn_cus_edit.setObjectName("btn_cus_edit")
        self.tabWidget.addTab(self.tab_customers, "")
        self.tab_myShop = QtWidgets.QWidget()
        self.tab_myShop.setObjectName("tab_myShop")
        self.btn_shop_changePwd = QtWidgets.QPushButton(self.tab_myShop)
        self.btn_shop_changePwd.setGeometry(QtCore.QRect(630, 380, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_shop_changePwd.setFont(font)
        self.btn_shop_changePwd.setObjectName("btn_shop_changePwd")
        self.lbl_shop_stat = QtWidgets.QLabel(self.tab_myShop)
        self.lbl_shop_stat.setGeometry(QtCore.QRect(10, 15, 281, 31))
        self.lbl_shop_stat.setObjectName("lbl_shop_stat")
        self.tbl_shop_stat = QtWidgets.QTableWidget(self.tab_myShop)
        self.tbl_shop_stat.setGeometry(QtCore.QRect(10, 50, 581, 231))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(11)
        self.tbl_shop_stat.setFont(font)
        self.tbl_shop_stat.setObjectName("tbl_shop_stat")
        self.tbl_shop_stat.setColumnCount(0)
        self.tbl_shop_stat.setRowCount(0)
        self.btn_shop_viewStat = QtWidgets.QPushButton(self.tab_myShop)
        self.btn_shop_viewStat.setGeometry(QtCore.QRect(530, 10, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_shop_viewStat.setFont(font)
        self.btn_shop_viewStat.setObjectName("btn_shop_viewStat")
        self.cmb_shop_viewStat = QtWidgets.QComboBox(self.tab_myShop)
        self.cmb_shop_viewStat.setGeometry(QtCore.QRect(320, 10, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.cmb_shop_viewStat.setFont(font)
        self.cmb_shop_viewStat.setObjectName("cmb_shop_viewStat")
        self.cmb_shop_viewStat.addItem("")
        self.cmb_shop_viewStat.addItem("")
        self.cmb_shop_viewStat.addItem("")
        self.cmb_shop_viewStat.addItem("")
        self.cmb_shop_viewStat.addItem("")
        self.line_shop_2 = QtWidgets.QFrame(self.tab_myShop)
        self.line_shop_2.setGeometry(QtCore.QRect(600, 10, 16, 551))
        self.line_shop_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_shop_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_shop_2.setObjectName("line_shop_2")
        self.lbl_shop_settings = QtWidgets.QLabel(self.tab_myShop)
        self.lbl_shop_settings.setGeometry(QtCore.QRect(630, 10, 191, 31))
        self.lbl_shop_settings.setObjectName("lbl_shop_settings")
        self.btn_shop_exit = QtWidgets.QPushButton(self.tab_myShop)
        self.btn_shop_exit.setGeometry(QtCore.QRect(900, 520, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(13)
        self.btn_shop_exit.setFont(font)
        self.btn_shop_exit.setStyleSheet("background-color: rgb(255, 124, 10);\n"
                                         "color: rgb(255, 255, 255);")
        self.btn_shop_exit.setObjectName("btn_shop_exit")
        self.line_shop = QtWidgets.QFrame(self.tab_myShop)
        self.line_shop.setGeometry(QtCore.QRect(10, 290, 581, 16))
        self.line_shop.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_shop.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_shop.setObjectName("line_shop")
        self.lbl_shop_coupons = QtWidgets.QLabel(self.tab_myShop)
        self.lbl_shop_coupons.setGeometry(QtCore.QRect(10, 305, 281, 31))
        self.lbl_shop_coupons.setObjectName("lbl_shop_coupons")
        self.tbl_shop_coupons = QtWidgets.QTableWidget(self.tab_myShop)
        self.tbl_shop_coupons.setGeometry(QtCore.QRect(10, 340, 451, 221))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(11)
        self.tbl_shop_coupons.setFont(font)
        self.tbl_shop_coupons.setObjectName("tbl_shop_coupons")
        self.tbl_shop_coupons.setColumnCount(0)
        self.tbl_shop_coupons.setRowCount(0)
        self.btn_shop_saveCoupon = QtWidgets.QPushButton(self.tab_myShop)
        self.btn_shop_saveCoupon.setGeometry(QtCore.QRect(470, 520, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_shop_saveCoupon.setFont(font)
        self.btn_shop_saveCoupon.setObjectName("btn_shop_saveCoupon")
        self.cmb_shop_couponStatus = QtWidgets.QComboBox(self.tab_myShop)
        self.cmb_shop_couponStatus.setGeometry(QtCore.QRect(470, 360, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.cmb_shop_couponStatus.setFont(font)
        self.cmb_shop_couponStatus.setObjectName("cmb_shop_couponStatus")
        self.cmb_shop_couponStatus.addItem("")
        self.cmb_shop_couponStatus.addItem("")
        self.cmb_shop_couponStatus.addItem("")
        self.lbl_shop_couponStatus = QtWidgets.QLabel(self.tab_myShop)
        self.lbl_shop_couponStatus.setGeometry(QtCore.QRect(470, 330, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_shop_couponStatus.setFont(font)
        self.lbl_shop_couponStatus.setObjectName("lbl_shop_couponStatus")
        self.btn_shop_saveSettings = QtWidgets.QPushButton(self.tab_myShop)
        self.btn_shop_saveSettings.setGeometry(QtCore.QRect(900, 380, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_shop_saveSettings.setFont(font)
        self.btn_shop_saveSettings.setObjectName("btn_shop_saveSettings")
        self.frame_settings = QtWidgets.QFrame(self.tab_myShop)
        self.frame_settings.setGeometry(QtCore.QRect(630, 50, 371, 311))
        self.frame_settings.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_settings.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_settings.setObjectName("frame_settings")
        self.formLayoutWidget = QtWidgets.QWidget(self.frame_settings)
        self.formLayoutWidget.setGeometry(QtCore.QRect(0, 0, 311, 301))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout_settings = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout_settings.setContentsMargins(0, 0, 0, 0)
        self.formLayout_settings.setHorizontalSpacing(20)
        self.formLayout_settings.setObjectName("formLayout_settings")
        self.lbl_shop_shipping = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_shop_shipping.setFont(font)
        self.lbl_shop_shipping.setObjectName("lbl_shop_shipping")
        self.formLayout_settings.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.lbl_shop_shipping)
        self.rdo_shop_shippingNo = QtWidgets.QRadioButton(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rdo_shop_shippingNo.setFont(font)
        self.rdo_shop_shippingNo.setObjectName("rdo_shop_shippingNo")
        self.formLayout_settings.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.rdo_shop_shippingNo)
        self.rdo_shop_shippingYes = QtWidgets.QRadioButton(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rdo_shop_shippingYes.setFont(font)
        self.rdo_shop_shippingYes.setObjectName("rdo_shop_shippingYes")
        self.formLayout_settings.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.rdo_shop_shippingYes)
        self.txt_shop_shipping = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_shop_shipping.setFont(font)
        self.txt_shop_shipping.setObjectName("txt_shop_shipping")
        self.formLayout_settings.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.txt_shop_shipping)
        spacerItem = QtWidgets.QSpacerItem(20, 100, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.formLayout_settings.setItem(3, QtWidgets.QFormLayout.FieldRole, spacerItem)
        self.lbl_shop_vat = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_shop_vat.setFont(font)
        self.lbl_shop_vat.setObjectName("lbl_shop_vat")
        self.formLayout_settings.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.lbl_shop_vat)
        self.rdo_shop_vatNo = QtWidgets.QRadioButton(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rdo_shop_vatNo.setFont(font)
        self.rdo_shop_vatNo.setObjectName("rdo_shop_vatNo")
        self.formLayout_settings.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.rdo_shop_vatNo)
        self.rdo_shop_vatYes = QtWidgets.QRadioButton(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rdo_shop_vatYes.setFont(font)
        self.rdo_shop_vatYes.setObjectName("rdo_shop_vatYes")
        self.formLayout_settings.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.rdo_shop_vatYes)
        self.txt_shop_vat = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_shop_vat.setFont(font)
        self.txt_shop_vat.setObjectName("txt_shop_vat")
        self.formLayout_settings.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.txt_shop_vat)
        spacerItem1 = QtWidgets.QSpacerItem(20, 100, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.formLayout_settings.setItem(7, QtWidgets.QFormLayout.FieldRole, spacerItem1)
        self.lbl_shop_ppNum = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_shop_ppNum.setFont(font)
        self.lbl_shop_ppNum.setObjectName("lbl_shop_ppNum")
        self.formLayout_settings.setWidget(8, QtWidgets.QFormLayout.LabelRole, self.lbl_shop_ppNum)
        self.txt_shop_ppNum = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_shop_ppNum.setFont(font)
        self.txt_shop_ppNum.setObjectName("txt_shop_ppNum")
        self.formLayout_settings.setWidget(8, QtWidgets.QFormLayout.FieldRole, self.txt_shop_ppNum)
        self.txt_shop_ppName = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(11)
        self.txt_shop_ppName.setFont(font)
        self.txt_shop_ppName.setObjectName("txt_shop_ppName")
        self.formLayout_settings.setWidget(9, QtWidgets.QFormLayout.FieldRole, self.txt_shop_ppName)
        self.lbl_shop_ppName = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_shop_ppName.setFont(font)
        self.lbl_shop_ppName.setObjectName("lbl_shop_ppName")
        self.formLayout_settings.setWidget(9, QtWidgets.QFormLayout.LabelRole, self.lbl_shop_ppName)
        self.lbl_shop_vatUnit = QtWidgets.QLabel(self.frame_settings)
        self.lbl_shop_vatUnit.setGeometry(QtCore.QRect(320, 187, 55, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_shop_vatUnit.setFont(font)
        self.lbl_shop_vatUnit.setObjectName("lbl_shop_vatUnit")
        self.lbl_shop_shippingUnit = QtWidgets.QLabel(self.frame_settings)
        self.lbl_shop_shippingUnit.setGeometry(QtCore.QRect(320, 67, 55, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_shop_shippingUnit.setFont(font)
        self.lbl_shop_shippingUnit.setObjectName("lbl_shop_shippingUnit")
        self.btn_shop_cancelSettings = QtWidgets.QPushButton(self.tab_myShop)
        self.btn_shop_cancelSettings.setGeometry(QtCore.QRect(770, 380, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_shop_cancelSettings.setFont(font)
        self.btn_shop_cancelSettings.setObjectName("btn_shop_cancelSettings")
        self.lbl_shop_logo = QtWidgets.QLabel(self.tab_myShop)
        self.lbl_shop_logo.setGeometry(QtCore.QRect(630, 460, 100, 100))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lbl_shop_logo.setFont(font)
        self.lbl_shop_logo.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_shop_logo.setObjectName("lbl_shop_logo")
        self.btn_shop_deleteCoupon = QtWidgets.QPushButton(self.tab_myShop)
        self.btn_shop_deleteCoupon.setGeometry(QtCore.QRect(470, 470, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_shop_deleteCoupon.setFont(font)
        self.btn_shop_deleteCoupon.setObjectName("btn_shop_deleteCoupon")
        self.tabWidget.addTab(self.tab_myShop, "")
        self.lbl_clock = QtWidgets.QLabel(self.centralwidget)
        self.lbl_clock.setGeometry(QtCore.QRect(730, 80, 331, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(18)
        self.lbl_clock.setFont(font)
        self.lbl_clock.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lbl_clock.setObjectName("lbl_clock")
        frm_admin_main.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(frm_admin_main)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1080, 21))
        self.menubar.setObjectName("menubar")
        frm_admin_main.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(frm_admin_main)
        self.statusbar.setObjectName("statusbar")
        frm_admin_main.setStatusBar(self.statusbar)

        self.retranslateUi(frm_admin_main)
        self.tabWidget.setCurrentIndex(0)  # Starting tab
        QtCore.QMetaObject.connectSlotsByName(frm_admin_main)
        frm_admin_main.setTabOrder(self.tabWidget, self.cmb_ord_statusSearch)
        frm_admin_main.setTabOrder(self.cmb_ord_statusSearch, self.txt_ord_search)
        frm_admin_main.setTabOrder(self.txt_ord_search, self.btn_ord_search)
        frm_admin_main.setTabOrder(self.btn_ord_search, self.tbl_ord_orders)
        frm_admin_main.setTabOrder(self.tbl_ord_orders, self.tbl_ord_cart)
        frm_admin_main.setTabOrder(self.tbl_ord_cart, self.cmb_ord_statusDetail)
        frm_admin_main.setTabOrder(self.cmb_ord_statusDetail, self.txt_ord_trackingNo)
        frm_admin_main.setTabOrder(self.txt_ord_trackingNo, self.btn_ord_viewAddress)
        frm_admin_main.setTabOrder(self.btn_ord_viewAddress, self.btn_ord_viewSlip)
        frm_admin_main.setTabOrder(self.btn_ord_viewSlip, self.btn_ord_cancel)
        frm_admin_main.setTabOrder(self.btn_ord_cancel, self.btn_ord_update)
        frm_admin_main.setTabOrder(self.btn_ord_update, self.cmb_pro_sortby)
        frm_admin_main.setTabOrder(self.cmb_pro_sortby, self.txt_pro_search)
        frm_admin_main.setTabOrder(self.txt_pro_search, self.btn_pro_search)
        frm_admin_main.setTabOrder(self.btn_pro_search, self.tbl_pro_products)
        frm_admin_main.setTabOrder(self.tbl_pro_products, self.txt_pro_name)
        frm_admin_main.setTabOrder(self.txt_pro_name, self.txt_pro_desc)
        frm_admin_main.setTabOrder(self.txt_pro_desc, self.txt_pro_brand)
        frm_admin_main.setTabOrder(self.txt_pro_brand, self.txt_pro_price)
        frm_admin_main.setTabOrder(self.txt_pro_price, self.txt_pro_spec)
        frm_admin_main.setTabOrder(self.txt_pro_spec, self.cmb_pro_cat)
        frm_admin_main.setTabOrder(self.cmb_pro_cat, self.btn_pro_cancel)
        frm_admin_main.setTabOrder(self.btn_pro_cancel, self.btn_pro_add)
        frm_admin_main.setTabOrder(self.btn_pro_add, self.cmb_cus_sortby)
        frm_admin_main.setTabOrder(self.cmb_cus_sortby, self.txt_cus_search)
        frm_admin_main.setTabOrder(self.txt_cus_search, self.btn_cus_search)
        frm_admin_main.setTabOrder(self.btn_cus_search, self.tbl_cus_customers)
        frm_admin_main.setTabOrder(self.tbl_cus_customers, self.btn_cus_view)
        frm_admin_main.setTabOrder(self.btn_cus_view, self.btn_cus_edit)
        frm_admin_main.setTabOrder(self.btn_cus_edit, self.cmb_shop_viewStat)
        frm_admin_main.setTabOrder(self.cmb_shop_viewStat, self.btn_shop_viewStat)
        frm_admin_main.setTabOrder(self.btn_shop_viewStat, self.tbl_shop_stat)
        frm_admin_main.setTabOrder(self.tbl_shop_stat, self.tbl_shop_coupons)
        frm_admin_main.setTabOrder(self.tbl_shop_coupons, self.cmb_shop_couponStatus)
        frm_admin_main.setTabOrder(self.cmb_shop_couponStatus, self.btn_shop_deleteCoupon)
        frm_admin_main.setTabOrder(self.btn_shop_deleteCoupon, self.btn_shop_saveCoupon)
        frm_admin_main.setTabOrder(self.btn_shop_saveCoupon, self.rdo_shop_shippingNo)
        frm_admin_main.setTabOrder(self.rdo_shop_shippingNo, self.rdo_shop_shippingYes)
        frm_admin_main.setTabOrder(self.rdo_shop_shippingYes, self.txt_shop_shipping)
        frm_admin_main.setTabOrder(self.txt_shop_shipping, self.rdo_shop_vatNo)
        frm_admin_main.setTabOrder(self.rdo_shop_vatNo, self.rdo_shop_vatYes)
        frm_admin_main.setTabOrder(self.rdo_shop_vatYes, self.txt_shop_vat)
        frm_admin_main.setTabOrder(self.txt_shop_vat, self.txt_shop_ppNum)
        frm_admin_main.setTabOrder(self.txt_shop_ppNum, self.txt_shop_ppName)
        frm_admin_main.setTabOrder(self.txt_shop_ppName, self.btn_shop_changePwd)
        frm_admin_main.setTabOrder(self.btn_shop_changePwd, self.btn_shop_cancelSettings)
        frm_admin_main.setTabOrder(self.btn_shop_cancelSettings, self.btn_shop_saveSettings)
        frm_admin_main.setTabOrder(self.btn_shop_saveSettings, self.btn_shop_exit)

        ###
        # Clock label
        self.showTime()
        timer = QTimer(frm_admin_main)  # creating a timer object
        timer.timeout.connect(self.showTime)  # adding action to timer
        timer.start(1000)  # update the timer every second

        # Event-Driven
        # Orders tab
        self.setOrderDetailBtnEnabled(boolean=False)
        self.getPriceSettings()
        self.getOrders()
        self.setupOrdersTable()
        self.addToOrdersTable()
        self.cmb_ord_statusDetail.setEnabled(False)
        self.txt_ord_trackingNo.setEnabled(False)

        self.btn_ord_search.clicked.connect(self.searchOrders)
        self.btn_ord_update.clicked.connect(self.updateOrderDetail)
        self.btn_ord_cancel.clicked.connect(lambda: self.orderDetailCancel(ask=True))
        self.cmb_ord_statusDetail.currentIndexChanged.connect(self.statusDetailChanged)

        # Products tab
        self.getProducts()
        self.setupProductsTable()
        self.addToProductsTable()

        self.btn_pro_search.clicked.connect(self.searchProducts)
        self.btn_pro_cancel.clicked.connect(self.productDetailCancel)
        self.btn_pro_add.clicked.connect(self.productDetailBtnClicked)

        # Customers tab
        self.getCustomers()
        self.setupCustomersTable()
        self.addToCustomersTable()
        self.btn_cus_edit.setEnabled(False)
        self.btn_cus_view.setEnabled(False)

        self.btn_cus_search.clicked.connect(self.searchCustomers)
        self.btn_cus_view.clicked.connect(self.cancelEditingCustomer)
        self.btn_cus_edit.clicked.connect(self.updateSelectedCustomer)

        # My Shop tab
        self.loadLogo()

        self.btn_shop_exit.clicked.connect(frm_admin_main.close)

        # main form
        frm_admin_main.closeEvent = self.confirmClosing

    ########## Orders tab starts here ##########

    def getOrders(self, con: dict = None):
        with GetDatabase() as conn:
            db = conn.get_database('ucwb')
            con = {} if con is None else con
            found = db.orders.count_documents(con)
            if found:
                cursor = db.orders.find(con).sort('oid', pymongo.DESCENDING)
                self.orders = list(cursor)
                self.orders_count = found
            else:
                self.orders = list()
                self.orders_count = 0

    def getPriceSettings(self):
        settings = getSettings()
        self.shipping_fee = settings['shipping_fee']
        self.tax_rate = settings['tax_rate']

    def setOrderDetailBtnEnabled(self, boolean=True):
        self.btn_ord_viewSlip.setEnabled(boolean)
        self.btn_ord_viewAddress.setEnabled(boolean)
        self.btn_ord_update.setEnabled(boolean)
        self.btn_ord_cancel.setEnabled(boolean)
        # self.txt_ord_trackingNo.setEnabled(boolean)
        # self.cmb_ord_statusDetail.setEnabled(boolean)

    def setupOrdersTable(self):
        # Update Found label
        self.lbl_ord_found.setText("พบ {} รายการ".format(self.orders_count))

        # Table Widget
        self.tbl_ord_orders.setRowCount(0)  # Reset Row
        self.tbl_ord_orders.setColumnCount(0)  # Reset Column
        self.tbl_ord_orders.setRowCount(self.orders_count)
        self.tbl_ord_orders.setColumnCount(6)
        self.tbl_ord_orders.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)  # Table Read-only

        # สร้าง Header
        header0 = QTableWidgetItem("")
        header1 = QTableWidgetItem("OID")
        header2 = QTableWidgetItem("Username")
        header3 = QTableWidgetItem("วันที่สั่งซื้อ")
        header4 = QTableWidgetItem("ราคารวม")
        header5 = QTableWidgetItem("สถานะ")

        # ใส่ Header ให้ Table
        self.tbl_ord_orders.setHorizontalHeaderItem(0, header0)
        self.tbl_ord_orders.setHorizontalHeaderItem(1, header1)
        self.tbl_ord_orders.setHorizontalHeaderItem(2, header2)
        self.tbl_ord_orders.setHorizontalHeaderItem(3, header3)
        self.tbl_ord_orders.setHorizontalHeaderItem(4, header4)
        self.tbl_ord_orders.setHorizontalHeaderItem(5, header5)

        # ตั้งค่าความกว้าง column
        self.tbl_ord_orders.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Interactive)
        self.tbl_ord_orders.setColumnWidth(0, 30)
        # self.tbl_ord_orders.setColumnWidth(1, 100)
        # self.tbl_ord_orders.setColumnWidth(2, 90)
        self.tbl_ord_orders.setColumnWidth(3, 90)
        self.tbl_ord_orders.setColumnWidth(4, 100)
        self.tbl_ord_orders.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        self.tbl_ord_orders.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        self.tbl_ord_orders.horizontalHeader().setSectionResizeMode(5, QtWidgets.QHeaderView.Stretch)

    def addToOrdersTable(self):
        self.btn_ord_view = list()
        try:
            for i, v in enumerate(self.orders):
                oid = v['oid']
                date = v['date']
                username = v['username']
                # Net Total
                total = 0
                for item in v['cart']:
                    total += item['price'] * item['qty']
                # ภาษีมูลค่าเพิ่ม
                vat = total * self.tax_rate / 100
                total += vat
                # ค่าจัดส่ง
                if v['shipping_info']['shipping']:
                    total += self.shipping_fee
                # คูปองส่วนลด
                # discount = 0 if v['coupon'] == "" else self.getCouponValue(v['coupon'])
                discount = float(v['coupon']['value'])
                total -= discount
                # สถานะ order
                # status = ORDER_STATUS["{}".format(v['status'])]
                status = getOrderStatus(v['status'])

                # Button สำหรับเลือก Order
                self.btn_ord_view.append(QtWidgets.QPushButton("ดู"))
                order_info = (v['cart'], v['shipping_info'], v['coupon'], v['status'], total)
                self.btn_ord_view[i].clicked.connect(partial(self.getSelectedOrder, i, oid, order_info))
                self.tbl_ord_orders.setCellWidget(i, 0, self.btn_ord_view[i])

                self.tbl_ord_orders.setItem(i, 1, QTableWidgetItem("{}".format(oid)))

                self.tbl_ord_orders.setItem(i, 2, QTableWidgetItem("{}".format(username)))

                self.tbl_ord_orders.setItem(i, 3, QTableWidgetItem("{}".format(date.replace(microsecond=0))))

                item_price = QTableWidgetItem("{:,.2f}".format(total))
                item_price.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
                self.tbl_ord_orders.setItem(i, 4, item_price)

                item_status = QTableWidgetItem("{}".format(status))
                item_status.setTextAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignVCenter)
                self.tbl_ord_orders.setItem(i, 5, item_status)

        except TypeError:
            pass  # เผื่อไว้ในกรณีที่ไม่มี Order

        finally:
            self.tbl_ord_orders.resizeRowsToContents()

    def searchOrders(self):
        search_txt = self.txt_ord_search.text()
        status = self.getOrderStatusCode(self.cmb_ord_statusSearch.currentIndex())

        con1 = {'$or': [{'oid': {"$regex": f'{search_txt}',
                                 "$options": "i"}},
                        {'username': {"$regex": f'{search_txt}',
                                      "$options": "i"}}
                        ]}
        con2 = {'status': str(status)}
        conditions = con1 if status is None else {'$and': [con1, con2]}
        self.getOrders(conditions)
        self.setupOrdersTable()
        self.addToOrdersTable()

    def getOrderStatusCode(self, index):
        code = index
        if 1 <= index <= 5:
            code -= 1
        elif index == 6:
            code = -1
        elif index == 7:
            code = -2
        else:
            return None
        return str(code)

    def getOrderStatusCmbIndex(self, code):
        index = code
        if 0 <= code <= 4:
            index += 1
        elif code == -1:
            index = 6
        elif code == -2:
            index = 7
        return index

    # แสดง Order ที่กด 'ดู'
    def getSelectedOrder(self, i, oid, data):
        if not self.cmb_ord_statusDetail.isEnabled():
            self.current_oid = oid
            shipping = data[1]
            status = int(data[3])

            self.setOrderDetailBtnEnabled(boolean=True)
            for btn in self.btn_ord_view:
                btn.setEnabled(True)
            self.btn_ord_view[i].setEnabled(False)
            self.cmb_ord_statusDetail.setEnabled(False)
            self.cmb_ord_statusDetail.setCurrentIndex(self.getOrderStatusCmbIndex(status))
            self.btn_ord_update.setText("แก้ไขข้อมูล")

            # Event-Driven
            self.btn_ord_viewSlip.disconnect()
            self.btn_ord_viewAddress.disconnect()
            self.btn_ord_viewSlip.clicked.connect(partial(self.viewOrderSlip, oid))
            self.btn_ord_viewAddress.clicked.connect(partial(self.viewOrderAddress, shipping))

            if 'tracking_no' in shipping:
                tracking_no = shipping['tracking_no']
            else:
                tracking_no = ""
            self.txt_ord_trackingNo.setText(tracking_no)
            self.txt_ord_trackingNo.setEnabled(False)

            try:
                self.showOrderDetailTable(data)
            except Exception as e:
                print(e)
        else:
            msg = QMessageBox()
            msg.setWindowTitle("ดูรายละเอียดคำสั่งซื้อ")
            msg.setText("กรุณาแก้ไขรายละเอียดคำสั่งซื้อให้เรียบร้อยก่อน")
            msg.setIcon(msg.Warning)
            msg.exec_()

    def viewOrderAddress(self, data):
        name = data['name']
        tel = data['tel']
        address = data['address']
        shipping = "ส่งด่วน" if data['shipping'] else "รับที่ร้าน"
        text = "ชื่อ\t: {}\nโทร\t: {}\nอยู่\t: {}\nการจัดส่ง\t: {}".format(name, tel, address, shipping)
        pyperclip.copy(text)
        text += "\n\n(Copied to clipboard)"

        msg = QMessageBox()
        msg.setWindowTitle("ข้อมูลการจัดส่ง")
        msg.setText("{}".format(text))
        msg.exec_()

    def viewOrderSlip(self, oid):
        try:
            with GetDatabase() as conn:
                db = conn.get_database('ucwb')
                fs = gridfs.GridFS(db)

                data = db.fs.files.find_one({'filename': oid})
                file_id = data['_id']
                file_extension = data['extension']
                uploadDate = str(data['uploadDate'].replace(microsecond=0)).replace(':', '-')
                output_data = fs.get(file_id).read()

                download_location = "temp/payslip/"
                if not os.path.exists(download_location):
                    os.makedirs(download_location)
                download_location += f"slip_{oid}_{uploadDate}.{file_extension}"
                output = open(download_location, "wb")
                output.write(output_data)
                output.close()

                # Display image
                img = Image.open(fr"{download_location}")
                img.show()

        except TypeError:
            msg = QMessageBox()
            msg.setWindowTitle("ตรวจสอบสลิป")
            msg.setIcon(QMessageBox.Critical)
            msg.setText("ไม่พบสลิป")
            msg.exec_()

    def updateOrderDetail(self):
        if self.btn_ord_update.text() == "แก้ไขข้อมูล":
            self.btn_ord_update.setText("บันทึก")
            # self.txt_ord_trackingNo.setEnabled(True)
            self.cmb_ord_statusDetail.setEnabled(True)
        else:
            msg = QMessageBox()
            ans = msg.question(msg, "บันทึกรายละเอียดคำสั่งซื้อ",
                               "คุณแน่ใจที่จะต้องการ 'บันทึกรายละเอียดคำสั่งซื้อ' นี้ใช่หรือไม่",
                               msg.Yes | msg.No)
            if ans == msg.Yes:
                if self.cmb_ord_statusDetail.currentIndex() > 0:
                    self.btn_ord_update.setText("แก้ไขข้อมูล")
                    self.txt_ord_trackingNo.setEnabled(False)
                    self.cmb_ord_statusDetail.setEnabled(False)
                    self.saveOrderDetail()
                else:
                    msg.setWindowTitle("บันทึกรายละเอียดคำสั่งซื้อ")
                    msg.setText("กรุณาเลือก 'สถานะคำสั่งซื้อ' ให้ถูกต้อง")
                    msg.setIcon(msg.Warning)
                    msg.exec_()

    def saveOrderDetail(self):
        oid = self.current_oid
        tracking_no = self.txt_ord_trackingNo.text().replace(' ', '').upper()
        status_code = self.getOrderStatusCode(self.cmb_ord_statusDetail.currentIndex())
        msg = QMessageBox()
        with GetDatabase() as conn:
            db = conn.get_database('ucwb')
            con = {'oid': oid}
            found = db.orders.count_documents(con)
            if found:
                setTo = {'$set': {'shipping_info.tracking_no': tracking_no,
                                  'status': status_code}}
                db.orders.update_one(con, setTo)
                msg.setIcon(QMessageBox.Information)
                msg.setText("บันทึกรายละเอียดคำสั่งซื้อสำเร็จ!")
                self.getOrders()  # Update Orders Table
                self.addToOrdersTable()
                self.orderDetailCancel(ask=False)  # Cancel selected
            else:
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Error: Order ID not found!")
            msg.exec_()

    def orderDetailCancel(self, ask=True):
        def cancelAction():
            self.current_oid = None
            self.tbl_ord_cart.setRowCount(0)  # Reset Row
            self.setOrderDetailBtnEnabled(boolean=False)
            self.txt_ord_trackingNo.setEnabled(False)
            self.txt_ord_trackingNo.setText("")
            self.cmb_ord_statusDetail.setEnabled(False)
            self.cmb_ord_statusDetail.setCurrentIndex(0)
            self.btn_ord_update.setText("แก้ไขข้อมูล")
            for btn in self.btn_ord_view:
                btn.setEnabled(True)

        if not self.cmb_ord_statusDetail.isEnabled():
            cancelAction()
            return
        if ask:
            msg = QMessageBox()
            ans = msg.question(msg, "แก้ไขรายละเอียดคำสั่งซื้อ",
                               "คุณแน่ใจที่จะต้องการ 'ยกเลิกแก้ไขรายละเอียดคำสั่งซื้อ' นี้ใช่หรือไม่",
                               msg.Yes | msg.No)
            if ans == msg.Yes:
                cancelAction()
        else:
            cancelAction()

    def statusDetailChanged(self):
        if self.cmb_ord_statusDetail.currentIndex() == 5:
            self.txt_ord_trackingNo.setEnabled(True)
        else:
            self.txt_ord_trackingNo.setEnabled(False)

    def showOrderDetailTable(self, data):
        cart = data[0]
        shipping = data[1]['shipping']
        coupon_code = "ไม่มี" if data[2]['code'] == "" else data[2]['code']
        discount = data[2]['value']

        num_row = len(cart) + 4
        self.setupOrderDetailTable(num_row)

        net_total = 0
        for i, v in enumerate(cart):
            price = v['price']
            qty = v['qty']
            total = price * qty
            net_total += total

            self.tbl_ord_cart.setItem(i, 0, QTableWidgetItem("{}".format(v['name'])))
            item_price = QTableWidgetItem("{:,.2f}".format(price))
            item_price.setTextAlignment(QtCore.Qt.AlignRight)
            self.tbl_ord_cart.setItem(i, 1, item_price)
            item_qty = QTableWidgetItem("{}".format(qty))
            item_qty.setTextAlignment(QtCore.Qt.AlignRight)
            self.tbl_ord_cart.setItem(i, 2, item_qty)
            item_total = QTableWidgetItem("{:,.2f}".format(total))
            item_total.setTextAlignment(QtCore.Qt.AlignRight)
            self.tbl_ord_cart.setItem(i, 3, item_total)
        # ภาษีมูลค่าเพิ่ม
        vat = net_total * self.tax_rate / 100
        net_total += vat
        self.tbl_ord_cart.setItem(num_row - 4, 0, QTableWidgetItem("ภาษี ({:g}%)".format(self.tax_rate)))
        item_shipping = QTableWidgetItem("{:,.2f}".format(vat))
        item_shipping.setTextAlignment(QtCore.Qt.AlignRight)
        self.tbl_ord_cart.setItem(num_row - 4, 3, item_shipping)
        # ค่าจัดส่ง
        shipping_fee = self.shipping_fee if shipping else 0
        net_total += shipping_fee
        shipping_text = "ส่งด่วน" if shipping_fee > 0 else "รับที่ร้าน"
        self.tbl_ord_cart.setItem(num_row - 3, 0, QTableWidgetItem("ค่าจัดส่ง ({})".format(shipping_text)))
        item_shipping = QTableWidgetItem("{:,.2f}".format(shipping_fee))
        item_shipping.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.tbl_ord_cart.setItem(num_row - 3, 3, item_shipping)
        # คูปองส่วนลด
        net_total -= discount if discount <= net_total else 0
        self.tbl_ord_cart.setItem(num_row - 2, 0, QTableWidgetItem("ส่วนลด ({})".format(coupon_code)))
        item_shipping = QTableWidgetItem("-{:,.2f}".format(discount))
        item_shipping.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.tbl_ord_cart.setItem(num_row - 2, 3, item_shipping)
        # Display 'net_total'
        font = QtGui.QFont()
        font.setBold(True)
        self.tbl_ord_cart.setItem(num_row - 1, 0, QTableWidgetItem("ราคาสุทธิ"))
        self.tbl_ord_cart.item(num_row - 1, 0).setFont(font)
        item_net_total = QTableWidgetItem("{:,.2f}".format(net_total))
        item_net_total.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        item_net_total.setFont(font)
        self.tbl_ord_cart.setItem(num_row - 1, 3, item_net_total)

    def setupOrderDetailTable(self, num_row):
        # Table Widget
        self.tbl_ord_cart.setRowCount(0)  # Reset Row
        self.tbl_ord_cart.setColumnCount(0)  # Reset Column
        self.tbl_ord_cart.setRowCount(num_row)
        self.tbl_ord_cart.setColumnCount(4)
        self.tbl_ord_cart.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)  # Table Read-only

        # สร้าง Header
        header1 = QtWidgets.QTableWidgetItem("รายการ")
        header2 = QtWidgets.QTableWidgetItem("ราคา/หน่วย")
        header3 = QtWidgets.QTableWidgetItem("จำนวน")
        header4 = QtWidgets.QTableWidgetItem("รวม")

        # ใส่ Header ให้ Table
        self.tbl_ord_cart.setHorizontalHeaderItem(0, header1)
        self.tbl_ord_cart.setHorizontalHeaderItem(1, header2)
        self.tbl_ord_cart.setHorizontalHeaderItem(2, header3)
        self.tbl_ord_cart.setHorizontalHeaderItem(3, header4)

        # ตั้งค่าความกว้าง column
        # self.tbl_ord_cart.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.Interactive)
        # self.tbl_ord_cart.horizontalHeader().setStretchLastSection(True)
        # self.tbl_ord_cart.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        self.tbl_ord_cart.setColumnWidth(0, 150)
        self.tbl_ord_cart.setColumnWidth(1, 90)
        self.tbl_ord_cart.setColumnWidth(2, 50)
        self.tbl_ord_cart.setColumnWidth(4, 60)

    ########## Orders tab ends here ##########

    ########## Products tab starts here ##########

    def getProducts(self, con: dict = None, sort: tuple = None):
        con = {} if con is None else con
        sort = ('pid', pymongo.ASCENDING) if sort is None else sort
        with GetDatabase() as conn:
            db = conn.get_database('ucwb')
            found = db.products.count_documents(con)
            if found:
                cursor = db.products.find(con).sort([sort])
                self.products = list(cursor)
                self.products_count = found
            else:
                self.products = list()
                self.products_count = 0

    def addToProductsTable(self):
        self.btn_pro_view = list()
        self.btn_pro_state = list()
        cursor = self.products
        for i, v in enumerate(cursor):
            pid = v['pid']
            name = v['name']
            desc = v['desc']
            brand = v['brand']
            price = v['price']
            spec = v['keyword']
            cat = v['cat']
            date = str(v['date_added'].replace(microsecond=0))
            state = v['status']

            self.btn_pro_view.append(QtWidgets.QPushButton("ดู"))
            pro_info = (pid, name, desc, brand, price, spec, cat)
            self.btn_pro_view[i].clicked.connect(partial(self.getSelectedProduct, i, pro_info))
            self.tbl_pro_products.setCellWidget(i, 0, self.btn_pro_view[i])

            self.tbl_pro_products.setItem(i, 1, QTableWidgetItem("{}".format(pid)))
            self.tbl_pro_products.setItem(i, 2, QTableWidgetItem("{}".format(name)))
            self.tbl_pro_products.setItem(i, 3, QTableWidgetItem("{}".format(desc)))
            self.tbl_pro_products.setItem(i, 4, QTableWidgetItem("{}".format(brand)))
            item_price = QTableWidgetItem("{:,.2f}".format(price))
            item_price.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
            self.tbl_pro_products.setItem(i, 5, item_price)
            self.tbl_pro_products.setItem(i, 6, QTableWidgetItem("{}".format(spec)))
            self.tbl_pro_products.setItem(i, 7, QTableWidgetItem("{}".format(date)))

            status_text = "เปิด" if state else "ปิด"
            self.btn_pro_state.append(QtWidgets.QPushButton(status_text))
            self.btn_pro_state[i].clicked.connect(partial(self.setSelectedProductState, i, pid))
            self.tbl_pro_products.setCellWidget(i, 8, self.btn_pro_state[i])

        self.tbl_pro_products.resizeRowsToContents()

    def setupProductsTable(self):
        # Update Found label
        self.lbl_pro_found.setText("พบ {} รายการ".format(self.products_count))

        # Table Widget
        self.tbl_pro_products.setRowCount(0)  # Reset table
        self.tbl_pro_products.setRowCount(self.products_count)
        self.tbl_pro_products.setColumnCount(9)
        self.tbl_pro_products.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)  # Table Read-only

        # สร้าง Header
        header0 = QtWidgets.QTableWidgetItem("")
        header1 = QtWidgets.QTableWidgetItem("PID")
        header2 = QtWidgets.QTableWidgetItem("ชื่อ")
        header3 = QtWidgets.QTableWidgetItem("รายละเอียด")
        header4 = QtWidgets.QTableWidgetItem("ยี่ห้อ")
        header5 = QtWidgets.QTableWidgetItem("ราคาต่อหน่วย")
        header6 = QtWidgets.QTableWidgetItem("Spec")
        header7 = QtWidgets.QTableWidgetItem("วันที่เพิ่ม")
        header8 = QtWidgets.QTableWidgetItem("สถานะ")

        # ใส่ Header ให้ Table
        self.tbl_pro_products.setHorizontalHeaderItem(0, header0)
        self.tbl_pro_products.setHorizontalHeaderItem(1, header1)
        self.tbl_pro_products.setHorizontalHeaderItem(2, header2)
        self.tbl_pro_products.setHorizontalHeaderItem(3, header3)
        self.tbl_pro_products.setHorizontalHeaderItem(4, header4)
        self.tbl_pro_products.setHorizontalHeaderItem(5, header5)
        self.tbl_pro_products.setHorizontalHeaderItem(6, header6)
        self.tbl_pro_products.setHorizontalHeaderItem(7, header7)
        self.tbl_pro_products.setHorizontalHeaderItem(8, header8)

        # ตั้งค่าความกว้าง column
        self.tbl_pro_products.setColumnWidth(0, 30)
        self.tbl_pro_products.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        self.tbl_pro_products.horizontalHeader().setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeToContents)
        self.tbl_pro_products.setColumnWidth(2, 150)
        self.tbl_pro_products.setColumnWidth(3, 200)
        self.tbl_pro_products.setColumnWidth(8, 50)

    def searchProducts(self):
        search_txt = self.txt_pro_search.text()
        sortby = self.cmb_pro_sortby.currentIndex()

        if search_txt != "":
            con = {'$or': [{'name': {"$regex": f'{search_txt}',
                                     "$options": "i"}},
                           {'desc': {"$regex": f'{search_txt}',
                                     "$options": "i"}},
                           {'keyword': {"$regex": f'{search_txt}',
                                        "$options": "i"}}
                           ]}
        else:
            con = {}

        if sortby == 1:
            sort_con = ('name', pymongo.ASCENDING)
        elif sortby == 2:
            sort_con = ('name', pymongo.DESCENDING)
        elif sortby == 3:
            sort_con = ('date_added', pymongo.DESCENDING)
        elif sortby == 4:
            sort_con = ('price', pymongo.ASCENDING)
        elif sortby == 5:
            sort_con = ('price', pymongo.DESCENDING)
        else:
            sort_con = ('pid', pymongo.ASCENDING)

        self.getProducts(con=con, sort=sort_con)
        self.setupProductsTable()
        self.addToProductsTable()

    def getSelectedProduct(self, i, data):
        self.lbl_pro_detail.setText("รายละเอียดสินค้า")
        self.btn_pro_add.setText("แก้ไข")
        self.setProductDetailFormEnabled(boolean=False)

        for btn in self.btn_pro_view:
            btn.setEnabled(True)
        self.btn_pro_view[i].setEnabled(False)

        self.current_pid = data[0]

        self.txt_pro_name.setText(data[1])
        self.txt_pro_desc.setText(data[2])
        self.txt_pro_brand.setText(data[3])
        self.txt_pro_price.setText("{:,.2f}".format(data[4]))
        self.txt_pro_spec.setText(data[5])
        cat_index = int(data[6][-2:])
        self.cmb_pro_cat.setCurrentIndex(cat_index)

    def setSelectedProductState(self, i, pid):
        if self.btn_pro_state[i].text() == "เปิด":
            self.btn_pro_state[i].setText("ปิด")
            state = False
        else:
            self.btn_pro_state[i].setText("เปิด")
            state = True
        with GetDatabase() as conn:
            db = conn.get_database('ucwb')
            con = {'pid': pid}
            found = db.products.count_documents(con)
            if found:
                setTo = {'$set': {'status': state}}
                db.products.update_one(con, setTo)

    def setProductDetailFormEnabled(self, boolean=True, disable_cat=True):
        self.txt_pro_name.setReadOnly(not boolean)
        self.txt_pro_desc.setReadOnly(not boolean)
        self.txt_pro_brand.setReadOnly(not boolean)
        self.txt_pro_price.setReadOnly(not boolean)
        self.txt_pro_spec.setReadOnly(not boolean)
        self.cmb_pro_cat.setEnabled(not disable_cat)

    def clearProductDetailForm(self):
        self.txt_pro_name.setText("")
        self.txt_pro_desc.setText("")
        self.txt_pro_brand.setText("")
        self.txt_pro_price.setText("")
        self.txt_pro_spec.setText("")
        self.cmb_pro_cat.setCurrentIndex(0)

    def productDetailBtnClicked(self):
        if self.btn_pro_add.text() == "แก้ไข":
            self.setProductDetailFormEnabled(boolean=True, disable_cat=True)
            self.btn_pro_add.setText("บันทึก")
        elif self.btn_pro_add.text() == "บันทึก":
            msg = QMessageBox()
            confirm = msg.question(msg, "แก้ไขข้อมูลสินค้า", "ยืนยันการแก้ไขข้อมูลสินค้า", msg.Yes | msg.No)
            if confirm == msg.Yes:
                self.updateProductDetail()
        else:
            self.addNewProduct()

    def updateProductDetail(self):
        msg = QMessageBox()
        msg.setWindowTitle("แก้ไขข้อมูลสินค้า")
        try:
            pid = self.current_pid
            name, desc, brand, price, spec, cat = self.getProductDetailFormData()

            msg.setIcon(msg.Warning)
            if not name:
                msg.setText("กรุณาใส่ 'ชื่อสินค้า' ให้ถูกต้อง")
                return
            if not brand:
                msg.setText("กรุณาใส่ 'ยี่ห้อ' ให้ถูกต้อง")
                return
            if not spec:
                msg.setText("กรุณาใส่ 'Spec' ให้ถูกต้อง")
                return
            if cat == "100":
                msg.setText("กรุณาเลือก 'ประเภทสินค้า' ให้ถูกต้อง")
                return

            with GetDatabase() as conn:
                db = conn.get_database('ucwb')
                con = {'pid': pid}
                found = db.products.count_documents(con)
                if found:
                    setTo = {'$set': {'name': name,
                                      'desc': desc,
                                      'brand': brand,
                                      'price': price,
                                      'keyword': spec,
                                      'cat': cat}}
                    db.products.update_one(con, setTo)
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("บันทึกรายละเอียดสินค้าสำเร็จ!")

                    self.getProducts()  # Update Orders Table
                    self.setupProductsTable()
                    self.addToProductsTable()
                    self.orderDetailCancel(ask=False)  # Cancel selected
                    self.setProductDetailFormEnabled(boolean=False, disable_cat=False)
                    self.clearProductDetailForm()
                    self.lbl_pro_detail.setText("เพิ่มสินค้า")
                    self.btn_pro_add.setText("เพิ่ม")
                else:
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Error: Product ID not found!")
        except ValueError:
            msg.setIcon(msg.Warning)
            msg.setText("กรุณาใส่ 'ราคาต่อหน่วย' ให้ถูกต้อง")
        finally:
            msg.exec_()

    def addNewProduct(self):
        msg = QMessageBox()
        msg.setWindowTitle("เพิ่มสินค้า")
        confirm = msg.question(msg, "เพิ่มสินค้า", "ยืนยันการเพิ่มสินค้า", msg.Yes | msg.No)
        if confirm == msg.Yes:
            try:
                name, desc, brand, price, spec, cat = self.getProductDetailFormData()

                msg.setIcon(msg.Warning)
                if not name:
                    msg.setText("กรุณาใส่ 'ชื่อสินค้า' ให้ถูกต้อง")
                    return
                if not brand:
                    msg.setText("กรุณาใส่ 'ยี่ห้อ' ให้ถูกต้อง")
                    return
                if not spec:
                    msg.setText("กรุณาใส่ 'Spec' ให้ถูกต้อง")
                    return
                if cat == "100":
                    msg.setText("กรุณาเลือก 'ประเภทสินค้า' ให้ถูกต้อง")
                    return

                with GetDatabase() as conn:
                    db = conn.get_database('ucwb')
                    count = db.products.count_documents({'cat': cat})
                    db.products.insert_one({'pid': "{}{:04d}".format(cat, count + 1),
                                            'name': name,
                                            'desc': desc,
                                            'brand': brand,
                                            'price': price,
                                            'keyword': spec,
                                            'cat': cat,
                                            'date_added': datetime.now(),
                                            'status': True
                                            })
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("เพิ่มสินค้าสำเร็จ!")

                    self.getProducts()  # Update Orders Table
                    self.setupProductsTable()
                    self.addToProductsTable()
                    self.orderDetailCancel(ask=False)  # Cancel selected
                    self.setProductDetailFormEnabled(boolean=False)
                    self.clearProductDetailForm()
            except ValueError:
                msg.setIcon(msg.Warning)
                msg.setText("กรุณาใส่ 'ราคาต่อหน่วย' ให้ถูกต้อง")
            finally:
                msg.exec_()

    def getProductDetailFormData(self):
        name = self.txt_pro_name.text().strip()
        desc = self.txt_pro_desc.toPlainText().strip()
        brand = self.txt_pro_brand.text().strip()
        price = float(self.txt_pro_price.text().strip().replace(',', ''))
        spec = self.txt_pro_spec.text().strip()
        cat = str(100 + self.cmb_pro_cat.currentIndex())
        return name, desc, brand, price, spec, cat

    def productDetailCancel(self, ask=True):
        def cancelAction():
            self.lbl_pro_detail.setText("เพิ่มสินค้า")
            self.btn_pro_add.setText("เพิ่ม")
            self.clearProductDetailForm()
            self.setProductDetailFormEnabled(boolean=True, disable_cat=False)
            for btn in self.btn_pro_view:
                btn.setEnabled(True)

        if self.cmb_pro_cat.isEnabled():
            check = self.txt_pro_name.text() + self.txt_pro_desc.toPlainText() + self.txt_pro_price.text() \
                    + self.txt_pro_spec.text() + self.txt_pro_spec.text()
            if check != "":
                ask = True
        if ask:
            msg = QMessageBox()
            ans = msg.question(msg, "ยกเลิกแก้ไขข้อมูล",
                               "คุณแน่ใจที่จะต้องการเลิกแก้ไขข้อมูลใช่หรือไม่",
                               msg.Yes | msg.No)
            if ans == msg.Yes:
                cancelAction()
        else:
            cancelAction()

    ########## Products tab ends here ##########

    ########## Customers tab starts here ##########

    def getCustomers(self, con: dict = None, sort: tuple = None):
        default_con = {'username': {'$ne': 'admin'}}
        con = default_con if con is None else default_con | con
        sort = ('username', pymongo.ASCENDING) if sort is None else sort
        with GetDatabase() as conn:
            db = conn.get_database('ucwb')
            found = db.users.count_documents(con)
            if found:
                cursor = db.users.find(con).sort([sort])
                self.customers = list(cursor)
                self.customers_count = found
            else:
                self.customers = list()
                self.customers_count = 0

    def addToCustomersTable(self):
        self.btn_cus_select = list()
        cursor = self.customers
        for i, v in enumerate(cursor):
            username = v['username']
            name = v['name']
            tel = v['tel']
            email = v['email']
            j_date = str(v['joined_date'].replace(microsecond=0))
            l_date = str(v['last_access'].replace(microsecond=0))

            self.btn_cus_select.append(QtWidgets.QPushButton("เลือก"))
            self.btn_cus_select[i].clicked.connect(partial(self.getSelectedCustomer, i, username))
            self.tbl_cus_customers.setCellWidget(i, 0, self.btn_cus_select[i])

            item = QTableWidgetItem("{}".format(username))
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
            self.tbl_cus_customers.setItem(i, 1, item)
            item = QTableWidgetItem("{}".format(name))
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
            self.tbl_cus_customers.setItem(i, 2, item)
            item = QTableWidgetItem("{}".format(tel))
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
            self.tbl_cus_customers.setItem(i, 3, item)
            item = QTableWidgetItem("{}".format(email))
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
            self.tbl_cus_customers.setItem(i, 4, item)
            item = QTableWidgetItem("{}".format(j_date))
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
            self.tbl_cus_customers.setItem(i, 5, item)
            item = QTableWidgetItem("{}".format(l_date))
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
            self.tbl_cus_customers.setItem(i, 6, item)
            # self.tbl_cus_customers.setItem(i, 1, QTableWidgetItem("{}".format(username)))
            # self.tbl_cus_customers.setItem(i, 2, QTableWidgetItem("{}".format(name)))
            # self.tbl_cus_customers.setItem(i, 3, QTableWidgetItem("{}".format(tel)))
            # self.tbl_cus_customers.setItem(i, 4, QTableWidgetItem("{}".format(email)))
            # self.tbl_cus_customers.setItem(i, 5, QTableWidgetItem("{}".format(j_date)))
            # self.tbl_cus_customers.setItem(i, 6, QTableWidgetItem("{}".format(l_date)))

        self.tbl_cus_customers.resizeRowsToContents()

    def setupCustomersTable(self):
        # Update Found label
        self.lbl_cus_found.setText("พบ {} รายการ".format(self.customers_count))

        # Table Widget
        self.tbl_cus_customers.setRowCount(0)  # Reset table
        self.tbl_cus_customers.setRowCount(self.customers_count)
        self.tbl_cus_customers.setColumnCount(7)
        # self.tbl_cus_customers.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)  # Table Read-only

        # สร้าง Header
        header0 = QtWidgets.QTableWidgetItem("")
        header1 = QtWidgets.QTableWidgetItem("Username")
        header2 = QtWidgets.QTableWidgetItem("ชื่อ")
        header3 = QtWidgets.QTableWidgetItem("โทรศัพท์")
        header4 = QtWidgets.QTableWidgetItem("อีเมล")
        header5 = QtWidgets.QTableWidgetItem("วันที่เข้าร่วม")
        header6 = QtWidgets.QTableWidgetItem("Last Access")

        # ใส่ Header ให้ Table
        self.tbl_cus_customers.setHorizontalHeaderItem(0, header0)
        self.tbl_cus_customers.setHorizontalHeaderItem(1, header1)
        self.tbl_cus_customers.setHorizontalHeaderItem(2, header2)
        self.tbl_cus_customers.setHorizontalHeaderItem(3, header3)
        self.tbl_cus_customers.setHorizontalHeaderItem(4, header4)
        self.tbl_cus_customers.setHorizontalHeaderItem(5, header5)
        self.tbl_cus_customers.setHorizontalHeaderItem(6, header6)

        # ตั้งค่าความกว้าง column
        self.tbl_cus_customers.setColumnWidth(0, 50)
        self.tbl_cus_customers.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        self.tbl_cus_customers.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        self.tbl_cus_customers.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)
        self.tbl_cus_customers.horizontalHeader().setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)
        self.tbl_cus_customers.horizontalHeader().setSectionResizeMode(5, QtWidgets.QHeaderView.Stretch)
        self.tbl_cus_customers.horizontalHeader().setSectionResizeMode(6, QtWidgets.QHeaderView.Stretch)

    def searchCustomers(self):
        search_txt = self.txt_cus_search.text()
        sortby = self.cmb_cus_sortby.currentIndex()

        if search_txt != "":
            con = {'$or': [{'username': {"$regex": f'{search_txt}',
                                         "$options": "i"}},
                           {'name': {"$regex": f'{search_txt}',
                                     "$options": "i"}},
                           {'tel': {"$regex": f'{search_txt}',
                                    "$options": "i"}},
                           {'email': {"$regex": f'{search_txt}',
                                      "$options": "i"}}
                           ]}
        else:
            con = {}

        if sortby == 1:
            sort_con = ('username', pymongo.DESCENDING)
        elif sortby == 2:
            sort_con = ('name', pymongo.ASCENDING)
        elif sortby == 3:
            sort_con = ('email', pymongo.ASCENDING)
        elif sortby == 4:
            sort_con = ('joined_date', pymongo.DESCENDING)
        elif sortby == 5:
            sort_con = ('last_access', pymongo.DESCENDING)
        else:
            sort_con = ('username', pymongo.ASCENDING)

        self.getCustomers(con=con, sort=sort_con)
        self.setupCustomersTable()
        self.addToCustomersTable()

    def getSelectedCustomer(self, row, username):
        self.current_cus_username = username
        self.current_cus_row = row
        # print("{} {}".format(row, username))
        self.btn_cus_edit.setEnabled(True)
        self.btn_cus_view.setEnabled(True)
        for btn in self.btn_cus_select:
            btn.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setBold(True)
        font.setPointSize(11)
        c1 = self.tbl_cus_customers.item(row, 2)
        self.temp_cus_c1 = c1.text()
        c1.setFlags(c1.flags() | QtCore.Qt.ItemIsEditable)
        c1.setFont(font)
        c2 = self.tbl_cus_customers.item(row, 3)
        self.temp_cus_c2 = c2.text()
        c2.setFlags(c2.flags() | QtCore.Qt.ItemIsEditable)
        c2.setFont(font)
        c3 = self.tbl_cus_customers.item(row, 4)
        self.temp_cus_c3 = c3.text()
        c3.setFlags(c3.flags() | QtCore.Qt.ItemIsEditable)
        c3.setFont(font)

    def cancelEditingCustomer(self):
        msg = QMessageBox()
        confirm = msg.question(msg, "แก้ไขข้อมูลลูกค้า",
                               "ท่านต้องการ 'ยกเลิกแก้ไขข้อมูล' นี้ใช่หรือไม่", msg.Yes | msg.No)
        if confirm == msg.Yes:
            for btn in self.btn_cus_select:
                btn.setEnabled(True)
            row = self.current_cus_row
            item = QTableWidgetItem("{}".format(self.temp_cus_c1))
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
            self.tbl_cus_customers.setItem(row, 2, item)
            item = QTableWidgetItem("{}".format(self.temp_cus_c2))
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
            self.tbl_cus_customers.setItem(row, 3, item)
            item = QTableWidgetItem("{}".format(self.temp_cus_c3))
            item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
            self.tbl_cus_customers.setItem(row, 4, item)

            self.btn_cus_edit.setEnabled(False)
            self.btn_cus_view.setEnabled(False)

    def updateSelectedCustomer(self):
        username = self.current_cus_username
        row = self.current_cus_row
        c1 = self.tbl_cus_customers.item(row, 2)
        c2 = self.tbl_cus_customers.item(row, 3)
        c3 = self.tbl_cus_customers.item(row, 4)
        name = c1.text()
        tel = c2.text()
        email = c3.text()

        msg = QMessageBox()
        confirm = msg.question(msg, "แก้ไขข้อมูลลูกค้า", "ยืนยันการแก้ไขข้อมูล", msg.Yes | msg.No)
        if confirm == msg.Yes:
            for btn in self.btn_cus_select:
                btn.setEnabled(True)
            with GetDatabase() as conn:
                db = conn.get_database('ucwb')
                con = {'username': username}
                found = db.users.count_documents(con)
                if found:
                    setTo = {'$set': {'name': name,
                                      'tel': tel,
                                      'email': email
                                      }}
                    db.users.update_one(con, setTo)

                    msg.setIcon(QMessageBox.Information)
                    msg.setText("บันทึกข้อมูลลูกค้่าสำเร็จ!")
                    msg.exec_()
                    self.btn_cus_edit.setEnabled(False)
                    self.btn_cus_view.setEnabled(False)
                    item = QTableWidgetItem("{}".format(name))
                    item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
                    self.tbl_cus_customers.setItem(row, 2, item)
                    item = QTableWidgetItem("{}".format(tel))
                    item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
                    self.tbl_cus_customers.setItem(row, 3, item)
                    item = QTableWidgetItem("{}".format(email))
                    item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)
                    self.tbl_cus_customers.setItem(row, 4, item)

    ########## Customers tab ends here ##########

    ########## My Shop tab starts here ##########

    ########## My Shop tab ends here ##########

    ########## The others starts here ##########

    def loadLogo(self):
        logo_path = "resource/logo/ucwb-logo2.png"
        if os.path.exists(logo_path):
            pixmap = QPixmap(logo_path)
            pixmap = pixmap.scaled(self.lbl_shop_logo.width(), self.lbl_shop_logo.height(), QtCore.Qt.KeepAspectRatio)
            self.lbl_shop_logo.setPixmap(pixmap)
        else:
            self.lbl_shop_logo.setText("Missing Logo")

    def showTime(self):
        current_time = QDateTime.currentDateTime()  # getting current time
        # label_time = current_time.toString("dd/MM/yyyy hh:mm:ss")  # converting QTime object to string
        label_time = QLocale("en_US").toString(current_time, "dd/MM/yyyy hh:mm:ss")
        self.lbl_clock.setText(label_time)  # showing it to the label

    def confirmClosing(self, event):
        msg = QMessageBox()
        confirm = msg.question(msg, "ยืนยันการปิดโปรแกรม", "ท่านต้องการจะปิดโปรแกรมใช่หรือไม่", msg.Yes | msg.No)
        if confirm == msg.Yes:
            event.accept()
        else:
            event.ignore()

    def retranslateUi(self, frm_admin_main):
        _translate = QtCore.QCoreApplication.translate
        frm_admin_main.setWindowTitle(_translate("frm_admin_main", "You Choose, We Build - Dashboard"))
        self.lbl_title.setText(_translate("frm_admin_main", "You Choose, We Build"))
        self.lbl_hi.setText(_translate("frm_admin_main", "Admin Dashboard"))
        item = self.tbl_ord_orders.horizontalHeaderItem(0)
        item.setText(_translate("frm_admin_main", "ID"))
        item = self.tbl_ord_orders.horizontalHeaderItem(1)
        item.setText(_translate("frm_admin_main", "วันที่สั่งซื้อ"))
        item = self.tbl_ord_orders.horizontalHeaderItem(2)
        item.setText(_translate("frm_admin_main", "รวม"))
        item = self.tbl_ord_orders.horizontalHeaderItem(3)
        item.setText(_translate("frm_admin_main", "สถานะ"))
        self.btn_ord_search.setText(_translate("frm_admin_main", "ค้นหา"))
        self.lbl_ord_found.setText(_translate("frm_admin_main", "พบ {0} รายการ"))
        self.lbl_ord_statusDetail.setText(_translate("frm_admin_main", "สถานะ"))
        self.cmb_ord_statusDetail.setItemText(0, _translate("frm_admin_main", "..."))
        self.cmb_ord_statusDetail.setItemText(1, _translate("frm_admin_main", "รอการชำระเงิน"))
        self.cmb_ord_statusDetail.setItemText(2, _translate("frm_admin_main", "รอแจ้งชำระเงิน"))
        self.cmb_ord_statusDetail.setItemText(3, _translate("frm_admin_main", "กำลังตรวจสอบ"))
        self.cmb_ord_statusDetail.setItemText(4, _translate("frm_admin_main", "รอการจัดส่ง"))
        self.cmb_ord_statusDetail.setItemText(5, _translate("frm_admin_main", "จัดส่งแล้ว"))
        self.cmb_ord_statusDetail.setItemText(6, _translate("frm_admin_main", "ยกเลิกแล้ว"))
        self.cmb_ord_statusDetail.setItemText(7, _translate("frm_admin_main", "ไม่ผ่านการตรวจสอบ"))
        self.btn_ord_cancel.setText(_translate("frm_admin_main", "ยกเลิก"))
        self.lbl_ord_detail.setText(_translate("frm_admin_main", "รายละเอียดคำสั่งซื้อ"))
        item = self.tbl_ord_cart.horizontalHeaderItem(0)
        item.setText(_translate("frm_admin_main", "รายการ"))
        item = self.tbl_ord_cart.horizontalHeaderItem(1)
        item.setText(_translate("frm_admin_main", "ราคา/หน่วย"))
        item = self.tbl_ord_cart.horizontalHeaderItem(2)
        item.setText(_translate("frm_admin_main", "จำนวน"))
        item = self.tbl_ord_cart.horizontalHeaderItem(3)
        item.setText(_translate("frm_admin_main", "ราคารวม"))
        self.btn_ord_update.setText(_translate("frm_admin_main", "แก้ไขข้อมูล"))
        self.lbl_ord_statusSearch.setText(_translate("frm_admin_main", "สถานะ"))
        self.cmb_ord_statusSearch.setItemText(0, _translate("frm_admin_main", "แสดงทั้งหมด"))
        self.cmb_ord_statusSearch.setItemText(1, _translate("frm_admin_main", "รอการชำระเงิน"))
        self.cmb_ord_statusSearch.setItemText(2, _translate("frm_admin_main", "รอแจ้งชำระเงิน"))
        self.cmb_ord_statusSearch.setItemText(3, _translate("frm_admin_main", "กำลังตรวจสอบ"))
        self.cmb_ord_statusSearch.setItemText(4, _translate("frm_admin_main", "รอการจัดส่ง"))
        self.cmb_ord_statusSearch.setItemText(5, _translate("frm_admin_main", "จัดส่งแล้ว"))
        self.cmb_ord_statusSearch.setItemText(6, _translate("frm_admin_main", "ยกเลิกแล้ว"))
        self.cmb_ord_statusSearch.setItemText(7, _translate("frm_admin_main", "ไม่ผ่านการตรวจสอบ"))
        self.lbl_ord_trackingNo.setText(_translate("frm_admin_main", "Tracking No."))
        self.btn_ord_viewSlip.setText(_translate("frm_admin_main", "ตรวจสอบสลิป"))
        self.btn_ord_viewAddress.setText(_translate("frm_admin_main", "ดูการจัดส่ง"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_orders), _translate("frm_admin_main", "Orders"))
        item = self.tbl_pro_products.horizontalHeaderItem(0)
        item.setText(_translate("frm_admin_main", "ID"))
        item = self.tbl_pro_products.horizontalHeaderItem(1)
        item.setText(_translate("frm_admin_main", "ชื่อ"))
        item = self.tbl_pro_products.horizontalHeaderItem(2)
        item.setText(_translate("frm_admin_main", "รายละเอียด"))
        item = self.tbl_pro_products.horizontalHeaderItem(3)
        item.setText(_translate("frm_admin_main", "ยี่ห้อ"))
        item = self.tbl_pro_products.horizontalHeaderItem(4)
        item.setText(_translate("frm_admin_main", "ราคาต่อหน่วย"))
        item = self.tbl_pro_products.horizontalHeaderItem(5)
        item.setText(_translate("frm_admin_main", "Spec"))
        item = self.tbl_pro_products.horizontalHeaderItem(6)
        item.setText(_translate("frm_admin_main", "Date Added"))
        self.btn_pro_search.setText(_translate("frm_admin_main", "ค้นหา"))
        self.lbl_pro_found.setText(_translate("frm_admin_main", "พบ {0} รายการ"))
        self.cmb_pro_sortby.setItemText(0, _translate("frm_admin_main", "PID"))
        self.cmb_pro_sortby.setItemText(1, _translate("frm_admin_main", "ชื่อ A-Z"))
        self.cmb_pro_sortby.setItemText(2, _translate("frm_admin_main", "ชื่อ Z-A"))
        self.cmb_pro_sortby.setItemText(3, _translate("frm_admin_main", "ล่าสุด"))
        self.cmb_pro_sortby.setItemText(4, _translate("frm_admin_main", "ราคาต่ำสุด"))
        self.cmb_pro_sortby.setItemText(5, _translate("frm_admin_main", "ราคาสูงสุด"))
        self.lbl_pro_sortby.setText(_translate("frm_admin_main", "Sort by"))
        self.lbl_pro_detail.setText(_translate("frm_admin_main", "เพิ่มสินค้า"))
        self.btn_pro_cancel.setText(_translate("frm_admin_main", "ยกเลิก"))
        self.btn_pro_add.setText(_translate("frm_admin_main", "เพิ่ม"))
        self.lbl_pro_name.setText(_translate("frm_admin_main", "ชื่อ"))
        self.lbl_pro_desc.setText(_translate("frm_admin_main", "รายละเอียด"))
        self.lbl_pro_brand.setText(_translate("frm_admin_main", "ยี่ห้อ"))
        self.lbl_pro_price.setText(_translate("frm_admin_main", "ราคาต่อหน่วย"))
        self.lbl_pro_spec.setText(_translate("frm_admin_main", "Specification"))
        self.lbl_pro_cat.setText(_translate("frm_admin_main", "ประเภท"))
        self.cmb_pro_cat.setItemText(0, _translate("frm_admin_main", "..."))
        self.cmb_pro_cat.setItemText(1, _translate("frm_admin_main", "CPU"))
        self.cmb_pro_cat.setItemText(2, _translate("frm_admin_main", "Mainboard"))
        self.cmb_pro_cat.setItemText(3, _translate("frm_admin_main", "VGA Card"))
        self.cmb_pro_cat.setItemText(4, _translate("frm_admin_main", "Memory"))
        self.cmb_pro_cat.setItemText(5, _translate("frm_admin_main", "Harddisk"))
        self.cmb_pro_cat.setItemText(6, _translate("frm_admin_main", "Solid State Drive"))
        self.cmb_pro_cat.setItemText(7, _translate("frm_admin_main", "Power Supply"))
        self.cmb_pro_cat.setItemText(8, _translate("frm_admin_main", "Case"))
        self.cmb_pro_cat.setItemText(9, _translate("frm_admin_main", "CPU Cooler"))
        self.cmb_pro_cat.setItemText(10, _translate("frm_admin_main", "Monitor"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_products), _translate("frm_admin_main", "Products"))
        item = self.tbl_cus_customers.horizontalHeaderItem(0)
        item.setText(_translate("frm_admin_main", "ID"))
        item = self.tbl_cus_customers.horizontalHeaderItem(1)
        item.setText(_translate("frm_admin_main", "ชื่อ-นามสกุล"))
        item = self.tbl_cus_customers.horizontalHeaderItem(2)
        item.setText(_translate("frm_admin_main", "โทรศัพท์"))
        item = self.tbl_cus_customers.horizontalHeaderItem(3)
        item.setText(_translate("frm_admin_main", "อีเมล"))
        item = self.tbl_cus_customers.horizontalHeaderItem(4)
        item.setText(_translate("frm_admin_main", "ที่อยู่"))
        item = self.tbl_cus_customers.horizontalHeaderItem(5)
        item.setText(_translate("frm_admin_main", "Joined Date"))
        item = self.tbl_cus_customers.horizontalHeaderItem(6)
        item.setText(_translate("frm_admin_main", "Last Access"))
        self.btn_cus_search.setText(_translate("frm_admin_main", "ค้นหา"))
        self.lbl_cus_found.setText(_translate("frm_admin_main", "พบ {0} รายการ"))
        self.cmb_cus_sortby.setItemText(0, _translate("frm_admin_main", "Username A-Z"))
        self.cmb_cus_sortby.setItemText(1, _translate("frm_admin_main", "Username Z-A"))
        self.cmb_cus_sortby.setItemText(2, _translate("frm_admin_main", "ชื่อ"))
        self.cmb_cus_sortby.setItemText(3, _translate("frm_admin_main", "อีเมล"))
        self.cmb_cus_sortby.setItemText(4, _translate("frm_admin_main", "วันที่เข้าร่วม"))
        self.cmb_cus_sortby.setItemText(5, _translate("frm_admin_main", "Last Access"))
        self.lbl_cus_sortby.setText(_translate("frm_admin_main", "Sort by"))
        self.btn_cus_view.setText(_translate("frm_admin_main", "ยกเลิก"))
        self.btn_cus_edit.setText(_translate("frm_admin_main", "บันทึก"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_customers), _translate("frm_admin_main", "Customers"))
        self.btn_shop_changePwd.setText(_translate("frm_admin_main", "เปลี่ยนรหัสผ่าน"))
        self.lbl_shop_stat.setText(_translate("frm_admin_main", "สถิติร้านค้า"))
        self.btn_shop_viewStat.setText(_translate("frm_admin_main", "ดู"))
        self.cmb_shop_viewStat.setItemText(0, _translate("frm_admin_main", "..."))
        self.cmb_shop_viewStat.setItemText(1, _translate("frm_admin_main", "ชื่อ"))
        self.cmb_shop_viewStat.setItemText(2, _translate("frm_admin_main", "ล่าสุด"))
        self.cmb_shop_viewStat.setItemText(3, _translate("frm_admin_main", "ราคาสูงสุด"))
        self.cmb_shop_viewStat.setItemText(4, _translate("frm_admin_main", "ราคาต่ำสุด"))
        self.lbl_shop_settings.setText(_translate("frm_admin_main", "การตั้งค่าร้านค้า"))
        self.btn_shop_exit.setText(_translate("frm_admin_main", "ออกจากระบบ"))
        self.lbl_shop_coupons.setText(_translate("frm_admin_main", "จัดการคูปอง"))
        self.btn_shop_saveCoupon.setText(_translate("frm_admin_main", "บันทึกคูปอง"))
        self.cmb_shop_couponStatus.setItemText(0, _translate("frm_admin_main", "..."))
        self.cmb_shop_couponStatus.setItemText(1, _translate("frm_admin_main", "เปิดใช้งาน"))
        self.cmb_shop_couponStatus.setItemText(2, _translate("frm_admin_main", "ปิดใช้งาน"))
        self.lbl_shop_couponStatus.setText(_translate("frm_admin_main", "สถานะ"))
        self.btn_shop_saveSettings.setText(_translate("frm_admin_main", "บันทึกการตั้งค่า"))
        self.lbl_shop_shipping.setText(_translate("frm_admin_main", "ค่าจัดส่ง"))
        self.rdo_shop_shippingNo.setText(_translate("frm_admin_main", "ไม่มีค่าจัดส่ง"))
        self.rdo_shop_shippingYes.setText(_translate("frm_admin_main", "มีค่าจัดส่ง"))
        self.lbl_shop_vat.setText(_translate("frm_admin_main", "ภาษีมูลค่าเพิ่ม"))
        self.rdo_shop_vatNo.setText(_translate("frm_admin_main", "ไม่มีภาษี"))
        self.rdo_shop_vatYes.setText(_translate("frm_admin_main", "มีภาษี"))
        self.lbl_shop_ppNum.setText(_translate("frm_admin_main", "PromptPay No."))
        self.lbl_shop_ppName.setText(_translate("frm_admin_main", "ชื่อบัญชี"))
        self.lbl_shop_vatUnit.setText(_translate("frm_admin_main", "%"))
        self.lbl_shop_shippingUnit.setText(_translate("frm_admin_main", "บาท"))
        self.btn_shop_cancelSettings.setText(_translate("frm_admin_main", "ยกเลิก"))
        self.lbl_shop_logo.setText(_translate("frm_admin_main", "Logo"))
        self.btn_shop_deleteCoupon.setText(_translate("frm_admin_main", "ลบคูปอง"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_myShop), _translate("frm_admin_main", "My Shop"))
        self.lbl_clock.setText(_translate("frm_admin_main", "HH:MM:SS DD/MM/YYYY"))


frm_admin_main = None
if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    frm_admin_main = QtWidgets.QMainWindow()
    ui = Ui_frm_admin_main()
    ui.setupUi(frm_admin_main)
    frm_admin_main.show()
    sys.exit(app.exec_())
