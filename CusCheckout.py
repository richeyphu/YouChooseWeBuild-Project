# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/cus_checkout.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem
from datetime import datetime

import CusPayment
from ucwblib import GetDatabase, getSettings, getCouponValue, ICON_PATH, QMessageBox


class Ui_frm_cus_checkout(object):

    def __init__(self, cart: dict = {}, username: str = None):
        self.username = username
        self.cart = cart
        self.shipping_fee = 0
        self.tax_rate = 0
        self.discount = 0
        self.code = ""

    def setupUi(self, frm_cus_checkout):
        frm_cus_checkout.setObjectName("frm_cus_checkout")
        frm_cus_checkout.resize(900, 600)

        frm_cus_checkout.setFixedSize(QtCore.QSize(900, 600))
        frm_cus_checkout.setWindowFlags(QtCore.Qt.WindowCloseButtonHint)

        # Set window icon
        frm_cus_checkout.setWindowIcon(QtGui.QIcon(ICON_PATH))

        self.tbl_cart = QtWidgets.QTableWidget(frm_cus_checkout)
        self.tbl_cart.setGeometry(QtCore.QRect(30, 110, 481, 411))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(11)
        self.tbl_cart.setFont(font)
        self.tbl_cart.setObjectName("tbl_cart")
        self.tbl_cart.setColumnCount(4)
        self.tbl_cart.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cart.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cart.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cart.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbl_cart.setHorizontalHeaderItem(3, item)
        self.frame_header = QtWidgets.QFrame(frm_cus_checkout)
        self.frame_header.setGeometry(QtCore.QRect(0, 0, 901, 61))
        self.frame_header.setStyleSheet("background-color: rgb(0, 148, 217);")
        self.frame_header.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_header.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_header.setObjectName("frame_header")
        self.lbl_title = QtWidgets.QLabel(self.frame_header)
        self.lbl_title.setGeometry(QtCore.QRect(20, 10, 281, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(20)
        self.lbl_title.setFont(font)
        self.lbl_title.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_title.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.lbl_title.setObjectName("lbl_title")
        self.lbl_title_2 = QtWidgets.QLabel(self.frame_header)
        self.lbl_title_2.setGeometry(QtCore.QRect(600, 10, 281, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(20)
        self.lbl_title_2.setFont(font)
        self.lbl_title_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.lbl_title_2.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lbl_title_2.setObjectName("lbl_title_2")
        self.lbl_cart = QtWidgets.QLabel(frm_cus_checkout)
        self.lbl_cart.setGeometry(QtCore.QRect(30, 80, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(14)
        self.lbl_cart.setFont(font)
        self.lbl_cart.setObjectName("lbl_cart")
        self.frame = QtWidgets.QFrame(frm_cus_checkout)
        self.frame.setGeometry(QtCore.QRect(530, 120, 341, 331))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.formLayoutWidget = QtWidgets.QWidget(self.frame)
        self.formLayoutWidget.setGeometry(QtCore.QRect(0, 0, 341, 191))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setVerticalSpacing(12)
        self.formLayout.setObjectName("formLayout")
        self.lbl_name = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_name.setFont(font)
        self.lbl_name.setObjectName("lbl_name")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.lbl_name)
        self.txt_name = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(10)
        self.txt_name.setFont(font)
        self.txt_name.setObjectName("txt_name")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.txt_name)
        self.lbl_tel = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_tel.setFont(font)
        self.lbl_tel.setObjectName("lbl_tel")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.lbl_tel)
        self.txt_tel = QtWidgets.QLineEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(10)
        self.txt_tel.setFont(font)
        self.txt_tel.setObjectName("txt_tel")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.txt_tel)
        self.lbl_address = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_address.setFont(font)
        self.lbl_address.setObjectName("lbl_address")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.lbl_address)
        self.txt_address = QtWidgets.QTextEdit(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(10)
        self.txt_address.setFont(font)
        self.txt_address.setObjectName("txt_address")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.txt_address)
        self.chk_saveAddr = QtWidgets.QCheckBox(self.frame)
        self.chk_saveAddr.setGeometry(QtCore.QRect(100, 190, 171, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.chk_saveAddr.setFont(font)
        self.chk_saveAddr.setObjectName("chk_saveAddr")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.frame)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 230, 291, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lbl_shipping = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_shipping.setFont(font)
        self.lbl_shipping.setObjectName("lbl_shipping")
        self.horizontalLayout.addWidget(self.lbl_shipping)
        self.rdo_shipping1 = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.rdo_shipping1.setFont(font)
        self.rdo_shipping1.setObjectName("rdo_shipping1")
        self.horizontalLayout.addWidget(self.rdo_shipping1)
        self.rdo_shipping2 = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.rdo_shipping2.setFont(font)
        self.rdo_shipping2.setObjectName("rdo_shipping2")
        self.horizontalLayout.addWidget(self.rdo_shipping2)
        self.lbl_coupon = QtWidgets.QLabel(self.frame)
        self.lbl_coupon.setGeometry(QtCore.QRect(0, 268, 81, 49))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.lbl_coupon.setFont(font)
        self.lbl_coupon.setObjectName("lbl_coupon")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.frame)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(100, 270, 241, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.txt_coupon = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(10)
        self.txt_coupon.setFont(font)
        self.txt_coupon.setObjectName("txt_coupon")
        self.horizontalLayout_2.addWidget(self.txt_coupon)
        self.btn_coupon = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(12)
        self.btn_coupon.setFont(font)
        self.btn_coupon.setObjectName("btn_coupon")
        self.horizontalLayout_2.addWidget(self.btn_coupon)
        self.lbl_cusdata = QtWidgets.QLabel(frm_cus_checkout)
        self.lbl_cusdata.setGeometry(QtCore.QRect(530, 80, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(14)
        self.lbl_cusdata.setFont(font)
        self.lbl_cusdata.setObjectName("lbl_cusdata")
        self.btn_confirm = QtWidgets.QPushButton(frm_cus_checkout)
        self.btn_confirm.setGeometry(QtCore.QRect(530, 529, 341, 41))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(14)
        self.btn_confirm.setFont(font)
        self.btn_confirm.setStyleSheet("background:rgb(255, 124, 10);\n"
                                       "color: rgb(255, 255, 255);")
        self.btn_confirm.setObjectName("btn_confirm")
        self.btn_cancel = QtWidgets.QPushButton(frm_cus_checkout)
        self.btn_cancel.setGeometry(QtCore.QRect(530, 480, 161, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_cancel.sizePolicy().hasHeightForWidth())
        self.btn_cancel.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(14)
        self.btn_cancel.setFont(font)
        self.btn_cancel.setObjectName("btn_cancel")
        self.btn_save = QtWidgets.QPushButton(frm_cus_checkout)
        self.btn_save.setGeometry(QtCore.QRect(710, 480, 161, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_save.sizePolicy().hasHeightForWidth())
        self.btn_save.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(14)
        self.btn_save.setFont(font)
        self.btn_save.setObjectName("btn_save")
        self.lbl_total = QtWidgets.QLabel(frm_cus_checkout)
        self.lbl_total.setGeometry(QtCore.QRect(30, 540, 481, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit")
        font.setPointSize(18)
        self.lbl_total.setFont(font)
        self.lbl_total.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.lbl_total.setObjectName("lbl_total")

        self.retranslateUi(frm_cus_checkout)
        QtCore.QMetaObject.connectSlotsByName(frm_cus_checkout)

        ###
        self.rdo_shipping1.setChecked(True)
        self.showTable()
        self.getCusInfo()

        # Event-Driven
        self.btn_confirm.clicked.connect(self.confirmOrder)
        self.btn_cancel.clicked.connect(self.cancel)
        self.btn_coupon.clicked.connect(self.useCoupon)
        self.btn_save.clicked.connect(self.saveClicked)
        self.rdo_shipping1.toggled.connect(self.shippingFee)

    def setCart(self, cart: dict = {}):
        self.cart = cart

    def showTable(self):
        # with pymongo.MongoClient(CONN_STR) as conn:

        # with GetDatabase() as conn:
        #     db = conn.get_database('ucwb')
        #
        #     condition = {'name': 'shipping_fee'}
        #     cursor = db.settings.find(condition)
        #     self.shipping_fee = cursor[0]['value']
        #
        #     condition = {'name': 'tax_rate'}
        #     cursor = db.settings.find(condition)
        #     self.tax_rate = cursor[0]['value']
        settings = getSettings()
        self.shipping_fee = settings['shipping_fee']
        self.tax_rate = settings['tax_rate']

        # สร้างตาราง
        self.addToTable(self.cart)

    def addToTable(self, cart):
        num_row = len(cart) + 3
        self.setupTable(num_row)
        self.net_total = 0

        for i, v in enumerate(cart):
            price = v['price']
            qty = v['qty']
            total = price * qty
            self.net_total += total

            self.tbl_cart.setItem(i, 0, QTableWidgetItem("{}".format(v['name'])))
            item_price = QTableWidgetItem("{:,.2f}".format(price))
            item_price.setTextAlignment(QtCore.Qt.AlignRight)
            self.tbl_cart.setItem(i, 1, item_price)
            item_qty = QTableWidgetItem("{}".format(qty))
            item_qty.setTextAlignment(QtCore.Qt.AlignRight)
            self.tbl_cart.setItem(i, 2, item_qty)
            item_total = QTableWidgetItem("{:,.2f}".format(total))
            item_total.setTextAlignment(QtCore.Qt.AlignRight)
            self.tbl_cart.setItem(i, 3, item_total)
        # ภาษีมูลค่าเพิ่ม
        vat = self.net_total * self.tax_rate / 100
        self.net_total += vat
        self.tbl_cart.setItem(num_row - 3, 0, QTableWidgetItem("ภาษี ({:g}%)".format(self.tax_rate)))
        item_shipping = QTableWidgetItem("{:,.2f}".format(vat))
        item_shipping.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.tbl_cart.setItem(num_row - 3, 3, item_shipping)
        # ค่าจัดส่ง
        shipping_fee = self.shipping_fee if self.rdo_shipping1.isChecked() else 0
        self.net_total += shipping_fee
        self.tbl_cart.setItem(num_row - 2, 0, QTableWidgetItem("ค่าจัดส่ง"))
        item_shipping = QTableWidgetItem("{:,.2f}".format(shipping_fee))
        item_shipping.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.tbl_cart.setItem(num_row - 2, 3, item_shipping)
        # คูปองส่วนลด
        coupon_code = "ไม่มี" if self.code == "" else self.code
        self.net_total -= self.discount if self.discount <= self.net_total else 0
        self.tbl_cart.setItem(num_row - 1, 0, QTableWidgetItem("ส่วนลด ({})".format(coupon_code)))
        item_shipping = QTableWidgetItem("-{:,.2f}".format(self.discount))
        item_shipping.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.tbl_cart.setItem(num_row - 1, 3, item_shipping)
        # Display 'net_total'
        self.lbl_total.setText("ราคาสุทธิ {:,.2f} บาท".format(self.net_total))

    def shippingFee(self):
        self.addToTable(self.cart)

    def useCoupon(self):
        msg = QMessageBox()
        msg.setWindowTitle("คูปอง")
        msg.setIcon(QMessageBox.Warning)
        code = self.txt_coupon.text().upper().strip()
        if code == "":
            msg.setText("กรุณากรอกรหัสคูปองให้ถูกต้อง")
            msg.exec_()
        else:
            discount = getCouponValue(code)
            if discount == 0:
                msg.setText("ไม่พบคูปอง")
                msg.exec_()
            else:
                self.code = code
                self.discount = discount
                self.addToTable(self.cart)
                msg.setIcon(QMessageBox.Information)
                msg.setText("ใช้คูปองสำเร็จ")
                msg.exec_()

    def setupTable(self, count):
        # Table Widget
        self.tbl_cart.setRowCount(0)  # Reset table
        self.tbl_cart.setRowCount(count)
        self.tbl_cart.setColumnCount(4)
        self.tbl_cart.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)  # Table Read-only

        # สร้าง Header
        header1 = QtWidgets.QTableWidgetItem("รายการ")
        header2 = QtWidgets.QTableWidgetItem("ราคา/หน่วย")
        header3 = QtWidgets.QTableWidgetItem("จำนวน")
        header4 = QtWidgets.QTableWidgetItem("รวม")

        # ใส่ Header ให้ Table
        self.tbl_cart.setHorizontalHeaderItem(0, header1)
        self.tbl_cart.setHorizontalHeaderItem(1, header2)
        self.tbl_cart.setHorizontalHeaderItem(2, header3)
        self.tbl_cart.setHorizontalHeaderItem(3, header4)

        # ตั้งค่าความกว้าง column
        self.tbl_cart.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.Interactive)
        self.tbl_cart.horizontalHeader().setStretchLastSection(True)
        # self.tbl_cart.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        self.tbl_cart.setColumnWidth(0, 220)
        self.tbl_cart.setColumnWidth(1, 90)
        self.tbl_cart.setColumnWidth(2, 50)
        self.tbl_cart.setColumnWidth(4, 60)

    def confirmOrder(self):
        if self.checkCusInfo():
            if self.chk_saveAddr.isChecked():
                self.saveCusInfo()
            self.saveOrder("1")

            # CusPayment.frm_cus_payment.exec_()
            frm_cus_payment = QtWidgets.QDialog()
            _ui = CusPayment.Ui_frm_cus_payment()
            _ui.setAmount(self.net_total)
            _ui.setupUi(frm_cus_payment)
            CusPayment.frm_cus_payment = frm_cus_payment
            frm_cus_payment.exec_()

            msg = QMessageBox()
            msg.setWindowTitle("ขอบคุณที่ใช้บริการ")
            msg.setIcon(QMessageBox.Information)
            msg.setText("กรุณายืนยันหลักฐานการชำระเงินที่หน้า My Order")
            msg.exec_()

            frm_cus_checkout.close()

    def checkCusInfo(self):
        name = self.txt_name.text().strip()
        tel = self.txt_tel.text().strip()
        address = self.txt_address.toPlainText().strip()

        msg = QMessageBox()
        msg.setWindowTitle("Checkout Error")
        msg.setIcon(QMessageBox.Warning)

        if name.isspace() or tel.isspace() or address.isspace():
            msg.setText("กรุณากรอกข้อมูลในการจัดส่งให้ครบถ้วน")
            msg.exec_()
            return False
        if len(name.split(' ')) < 2:
            msg.setText("กรุณากรอก 'ชื่อ-นามสกุล' ให้ถูกต้อง")
            msg.exec_()
            return False
        if not tel.isnumeric() or tel[0] != '0' or tel[1] == '0' or not 9 <= len(tel) <= 10:
            msg.setText("กรุณากรอก 'เบอร์โทรศัพท์' ให้ถูกต้อง")
            msg.exec_()
            return False
        if len(address.split(' ')) < 5:
            msg.setText("กรุณากรอก 'ที่อยู่' ให้ถูกต้อง")
            msg.exec_()
            return False

        return True

    def saveCusInfo(self):
        name = self.txt_name.text().strip()
        tel = self.txt_tel.text().strip()
        address = self.txt_address.toPlainText().strip()
        msg = QMessageBox()
        msg.setWindowTitle("บันทึกข้อมูลการจัดส่ง")

        with GetDatabase() as conn:
            db = conn.get_database('ucwb')
            con = {'username': {"$regex": f'^{self.username}$', "$options": "i"}}
            found = db.users.count_documents(con)
            if found:
                setTo = {'$set': {'shipping_info': {'name': name,
                                                    'tel': tel,
                                                    'address': address}}}
                db.users.update_one(con, setTo)
                msg.setIcon(QMessageBox.Information)
                msg.setText("บันทึกข้อมูลการจัดส่งสำเร็จ!")
            else:
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Error: Cannot save shipping info\nPlease login again...")
            msg.exec_()

    def getCusInfo(self):
        with GetDatabase() as conn:
            db = conn.get_database('ucwb')
            con1 = {'username': {"$regex": f'^{self.username}$',
                                 "$options": "i"}}
            con2 = {'shipping_info': {'$exists': True,
                                      '$ne': None}}
            where = {'$and': [con1, con2]}
            found = db.users.count_documents(where)
            if found:
                cursor = db.users.find(where)
                shipping_info = cursor[0]['shipping_info']
                self.txt_name.setText(shipping_info['name'])
                self.txt_tel.setText(shipping_info['tel'])
                self.txt_address.setText(shipping_info['address'])

    def saveClicked(self):
        if self.checkCusInfo():
            if self.chk_saveAddr.isChecked():
                self.saveCusInfo()
            self.saveOrder("0")
            msg = QMessageBox()
            msg.setWindowTitle("บันทึกรายการ")
            msg.setIcon(QMessageBox.Information)
            msg.setText("บันทึกรายการสำเร็จ!")
            msg.exec_()
            frm_cus_checkout.close()

    def saveOrder(self, status):
        name = self.txt_name.text()
        tel = self.txt_tel.text()
        address = self.txt_address.toPlainText()
        with GetDatabase() as conn:
            db = conn.get_database('ucwb')
            count = db.orders.count_documents({})
            oid = "{}{:06d}".format(datetime.today().year, count + 1)
            db.orders.insert_one({'oid': oid,
                                  'username': self.username,
                                  'cart': self.cart,
                                  'shipping_info': {'name': name,
                                                    'tel': tel,
                                                    'address': address,
                                                    'shipping': (True if self.rdo_shipping1.isChecked() else False)},
                                  'coupon': {'code': self.code,
                                             'value': self.discount},
                                  'date': datetime.now(),
                                  'status': status
                                  })

    def cancel(self):
        frm_cus_checkout.close()

    def retranslateUi(self, frm_cus_checkout):
        _translate = QtCore.QCoreApplication.translate
        frm_cus_checkout.setWindowTitle(_translate("frm_cus_checkout", "UCWB - Checkout"))
        item = self.tbl_cart.horizontalHeaderItem(0)
        item.setText(_translate("frm_cus_checkout", "รายการ"))
        item = self.tbl_cart.horizontalHeaderItem(1)
        item.setText(_translate("frm_cus_checkout", "ราคา/หน่วย"))
        item = self.tbl_cart.horizontalHeaderItem(2)
        item.setText(_translate("frm_cus_checkout", "จำนวน"))
        item = self.tbl_cart.horizontalHeaderItem(3)
        item.setText(_translate("frm_cus_checkout", "ราคารวม"))
        self.lbl_title.setText(_translate("frm_cus_checkout", "You Choose, We Build"))
        self.lbl_title_2.setText(_translate("frm_cus_checkout", "Checkout"))
        self.lbl_cart.setText(_translate("frm_cus_checkout", "รายการสั่งซื้อ"))
        self.lbl_name.setText(_translate("frm_cus_checkout", "ชื่อ-นามสกุล"))
        self.lbl_tel.setText(_translate("frm_cus_checkout", "เบอร์โทรศัพท์"))
        self.lbl_address.setText(_translate("frm_cus_checkout", "ที่อยู่"))
        self.chk_saveAddr.setText(_translate("frm_cus_checkout", "บันทึกข้อมูลการจัดส่ง"))
        self.lbl_shipping.setText(_translate("frm_cus_checkout", "การจัดส่ง"))
        self.rdo_shipping1.setText(_translate("frm_cus_checkout", "ส่งด่วน"))
        self.rdo_shipping2.setText(_translate("frm_cus_checkout", "รับที่ร้าน"))
        self.lbl_coupon.setText(_translate("frm_cus_checkout", "คูปอง"))
        self.btn_coupon.setText(_translate("frm_cus_checkout", "ใช้"))
        self.lbl_cusdata.setText(_translate("frm_cus_checkout", "ข้อมูลในการจัดส่ง"))
        self.btn_confirm.setText(_translate("frm_cus_checkout", "ยืนยันคำสั่งซื้อ"))
        self.btn_cancel.setText(_translate("frm_cus_checkout", "ยกเลิก"))
        self.btn_save.setText(_translate("frm_cus_checkout", "บันทึกรายการ"))
        self.lbl_total.setText(_translate("frm_cus_checkout", "ราคาสุทธิ 0.00 บาท"))


frm_cus_checkout = None
if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    frm_cus_checkout = QtWidgets.QDialog()
    ui = Ui_frm_cus_checkout()
    ui.setupUi(frm_cus_checkout)
    frm_cus_checkout.show()
    sys.exit(app.exec_())
